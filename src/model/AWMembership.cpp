/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWMembership::AWMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWMembership::AWMembership() {
    this->initializeModel();
}

AWMembership::~AWMembership() {}

void AWMembership::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_team_name_isSet = false;
    m_team_name_isValid = false;

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_joined_isSet = false;
    m_joined_isValid = false;

    m_confirm_isSet = false;
    m_confirm_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void AWMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWMembership::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("$createdAt")]);
    m_created_at_isSet = !json[QString("$createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("$updatedAt")]);
    m_updated_at_isSet = !json[QString("$updatedAt")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_team_name_isValid = ::OpenAPI::fromJsonValue(team_name, json[QString("teamName")]);
    m_team_name_isSet = !json[QString("teamName")].isNull() && m_team_name_isValid;

    m_invited_isValid = ::OpenAPI::fromJsonValue(invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_joined_isValid = ::OpenAPI::fromJsonValue(joined, json[QString("joined")]);
    m_joined_isSet = !json[QString("joined")].isNull() && m_joined_isValid;

    m_confirm_isValid = ::OpenAPI::fromJsonValue(confirm, json[QString("confirm")]);
    m_confirm_isSet = !json[QString("confirm")].isNull() && m_confirm_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString AWMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("$createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("$updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(user_name));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(user_email));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(team_id));
    }
    if (m_team_name_isSet) {
        obj.insert(QString("teamName"), ::OpenAPI::toJsonValue(team_name));
    }
    if (m_invited_isSet) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(invited));
    }
    if (m_joined_isSet) {
        obj.insert(QString("joined"), ::OpenAPI::toJsonValue(joined));
    }
    if (m_confirm_isSet) {
        obj.insert(QString("confirm"), ::OpenAPI::toJsonValue(confirm));
    }
    if (roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(roles));
    }
    return obj;
}

QString AWMembership::getId() const {
    return id;
}
void AWMembership::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool AWMembership::is_id_Set() const{
    return m_id_isSet;
}

bool AWMembership::is_id_Valid() const{
    return m_id_isValid;
}

QString AWMembership::getCreatedAt() const {
    return created_at;
}
void AWMembership::setCreatedAt(const QString &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool AWMembership::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool AWMembership::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString AWMembership::getUpdatedAt() const {
    return updated_at;
}
void AWMembership::setUpdatedAt(const QString &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool AWMembership::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool AWMembership::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString AWMembership::getUserId() const {
    return user_id;
}
void AWMembership::setUserId(const QString &user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

bool AWMembership::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool AWMembership::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString AWMembership::getUserName() const {
    return user_name;
}
void AWMembership::setUserName(const QString &user_name) {
    this->user_name = user_name;
    this->m_user_name_isSet = true;
}

bool AWMembership::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool AWMembership::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString AWMembership::getUserEmail() const {
    return user_email;
}
void AWMembership::setUserEmail(const QString &user_email) {
    this->user_email = user_email;
    this->m_user_email_isSet = true;
}

bool AWMembership::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool AWMembership::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString AWMembership::getTeamId() const {
    return team_id;
}
void AWMembership::setTeamId(const QString &team_id) {
    this->team_id = team_id;
    this->m_team_id_isSet = true;
}

bool AWMembership::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool AWMembership::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString AWMembership::getTeamName() const {
    return team_name;
}
void AWMembership::setTeamName(const QString &team_name) {
    this->team_name = team_name;
    this->m_team_name_isSet = true;
}

bool AWMembership::is_team_name_Set() const{
    return m_team_name_isSet;
}

bool AWMembership::is_team_name_Valid() const{
    return m_team_name_isValid;
}

QString AWMembership::getInvited() const {
    return invited;
}
void AWMembership::setInvited(const QString &invited) {
    this->invited = invited;
    this->m_invited_isSet = true;
}

bool AWMembership::is_invited_Set() const{
    return m_invited_isSet;
}

bool AWMembership::is_invited_Valid() const{
    return m_invited_isValid;
}

QString AWMembership::getJoined() const {
    return joined;
}
void AWMembership::setJoined(const QString &joined) {
    this->joined = joined;
    this->m_joined_isSet = true;
}

bool AWMembership::is_joined_Set() const{
    return m_joined_isSet;
}

bool AWMembership::is_joined_Valid() const{
    return m_joined_isValid;
}

bool AWMembership::isConfirm() const {
    return confirm;
}
void AWMembership::setConfirm(const bool &confirm) {
    this->confirm = confirm;
    this->m_confirm_isSet = true;
}

bool AWMembership::is_confirm_Set() const{
    return m_confirm_isSet;
}

bool AWMembership::is_confirm_Valid() const{
    return m_confirm_isValid;
}

QList<QString> AWMembership::getRoles() const {
    return roles;
}
void AWMembership::setRoles(const QList<QString> &roles) {
    this->roles = roles;
    this->m_roles_isSet = true;
}

bool AWMembership::is_roles_Set() const{
    return m_roles_isSet;
}

bool AWMembership::is_roles_Valid() const{
    return m_roles_isValid;
}

bool AWMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_user_id_isValid && m_user_name_isValid && m_user_email_isValid && m_team_id_isValid && m_team_name_isValid && m_invited_isValid && m_joined_isValid && m_confirm_isValid && m_roles_isValid && true;
}

} // namespace OpenAPI
