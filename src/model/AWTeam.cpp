/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWTeam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWTeam::AWTeam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWTeam::AWTeam() {
    this->initializeModel();
}

AWTeam::~AWTeam() {}

void AWTeam::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void AWTeam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWTeam::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("$createdAt")]);
    m_created_at_isSet = !json[QString("$createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("$updatedAt")]);
    m_updated_at_isSet = !json[QString("$updatedAt")].isNull() && m_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString AWTeam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWTeam::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("$createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("$updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(total));
    }
    return obj;
}

QString AWTeam::getId() const {
    return id;
}
void AWTeam::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool AWTeam::is_id_Set() const{
    return m_id_isSet;
}

bool AWTeam::is_id_Valid() const{
    return m_id_isValid;
}

QString AWTeam::getCreatedAt() const {
    return created_at;
}
void AWTeam::setCreatedAt(const QString &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool AWTeam::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool AWTeam::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString AWTeam::getUpdatedAt() const {
    return updated_at;
}
void AWTeam::setUpdatedAt(const QString &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool AWTeam::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool AWTeam::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString AWTeam::getName() const {
    return name;
}
void AWTeam::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool AWTeam::is_name_Set() const{
    return m_name_isSet;
}

bool AWTeam::is_name_Valid() const{
    return m_name_isValid;
}

qint32 AWTeam::getTotal() const {
    return total;
}
void AWTeam::setTotal(const qint32 &total) {
    this->total = total;
    this->m_total_isSet = true;
}

bool AWTeam::is_total_Set() const{
    return m_total_isSet;
}

bool AWTeam::is_total_Valid() const{
    return m_total_isValid;
}

bool AWTeam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWTeam::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_name_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
