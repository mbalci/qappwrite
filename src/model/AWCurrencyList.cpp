/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWCurrencyList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWCurrencyList::AWCurrencyList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWCurrencyList::AWCurrencyList() {
    this->initializeModel();
}

AWCurrencyList::~AWCurrencyList() {}

void AWCurrencyList::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_currencies_isSet = false;
    m_currencies_isValid = false;
}

void AWCurrencyList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWCurrencyList::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_currencies_isValid = ::OpenAPI::fromJsonValue(currencies, json[QString("currencies")]);
    m_currencies_isSet = !json[QString("currencies")].isNull() && m_currencies_isValid;
}

QString AWCurrencyList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWCurrencyList::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(total));
    }
    if (currencies.size() > 0) {
        obj.insert(QString("currencies"), ::OpenAPI::toJsonValue(currencies));
    }
    return obj;
}

qint32 AWCurrencyList::getTotal() const {
    return total;
}
void AWCurrencyList::setTotal(const qint32 &total) {
    this->total = total;
    this->m_total_isSet = true;
}

bool AWCurrencyList::is_total_Set() const{
    return m_total_isSet;
}

bool AWCurrencyList::is_total_Valid() const{
    return m_total_isValid;
}

QList<AWCurrency> AWCurrencyList::getCurrencies() const {
    return currencies;
}
void AWCurrencyList::setCurrencies(const QList<AWCurrency> &currencies) {
    this->currencies = currencies;
    this->m_currencies_isSet = true;
}

bool AWCurrencyList::is_currencies_Set() const{
    return m_currencies_isSet;
}

bool AWCurrencyList::is_currencies_Valid() const{
    return m_currencies_isValid;
}

bool AWCurrencyList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWCurrencyList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_isValid && m_currencies_isValid && true;
}

} // namespace OpenAPI
