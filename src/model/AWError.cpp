/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWError::AWError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWError::AWError() {
    this->initializeModel();
}

AWError::~AWError() {}

void AWError::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void AWError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWError::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString AWError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWError::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(version));
    }
    return obj;
}

QString AWError::getMessage() const {
    return message;
}
void AWError::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool AWError::is_message_Set() const{
    return m_message_isSet;
}

bool AWError::is_message_Valid() const{
    return m_message_isValid;
}

QString AWError::getCode() const {
    return code;
}
void AWError::setCode(const QString &code) {
    this->code = code;
    this->m_code_isSet = true;
}

bool AWError::is_code_Set() const{
    return m_code_isSet;
}

bool AWError::is_code_Valid() const{
    return m_code_isValid;
}

QString AWError::getType() const {
    return type;
}
void AWError::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool AWError::is_type_Set() const{
    return m_type_isSet;
}

bool AWError::is_type_Valid() const{
    return m_type_isValid;
}

QString AWError::getVersion() const {
    return version;
}
void AWError::setVersion(const QString &version) {
    this->version = version;
    this->m_version_isSet = true;
}

bool AWError::is_version_Set() const{
    return m_version_isSet;
}

bool AWError::is_version_Valid() const{
    return m_version_isValid;
}

bool AWError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_code_isValid && m_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
