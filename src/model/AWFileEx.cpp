/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWFileEx.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWFileEx::AWFileEx(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWFileEx::AWFileEx() {
    this->initializeModel();
}

AWFileEx::~AWFileEx() {}

void AWFileEx::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_bucket_id_isSet = false;
    m_bucket_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_size_original_isSet = false;
    m_size_original_isValid = false;

    m_chunks_total_isSet = false;
    m_chunks_total_isValid = false;

    m_chunks_uploaded_isSet = false;
    m_chunks_uploaded_isValid = false;
}

void AWFileEx::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWFileEx::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_bucket_id_isValid = ::OpenAPI::fromJsonValue(bucket_id, json[QString("bucketId")]);
    m_bucket_id_isSet = !json[QString("bucketId")].isNull() && m_bucket_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("$createdAt")]);
    m_created_at_isSet = !json[QString("$createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("$updatedAt")]);
    m_updated_at_isSet = !json[QString("$updatedAt")].isNull() && m_updated_at_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(permissions, json[QString("$permissions")]);
    m_permissions_isSet = !json[QString("$permissions")].isNull() && m_permissions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_size_original_isValid = ::OpenAPI::fromJsonValue(size_original, json[QString("sizeOriginal")]);
    m_size_original_isSet = !json[QString("sizeOriginal")].isNull() && m_size_original_isValid;

    m_chunks_total_isValid = ::OpenAPI::fromJsonValue(chunks_total, json[QString("chunksTotal")]);
    m_chunks_total_isSet = !json[QString("chunksTotal")].isNull() && m_chunks_total_isValid;

    m_chunks_uploaded_isValid = ::OpenAPI::fromJsonValue(chunks_uploaded, json[QString("chunksUploaded")]);
    m_chunks_uploaded_isSet = !json[QString("chunksUploaded")].isNull() && m_chunks_uploaded_isValid;
}

QString AWFileEx::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWFileEx::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_bucket_id_isSet) {
        obj.insert(QString("bucketId"), ::OpenAPI::toJsonValue(bucket_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("$createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("$updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (permissions.size() > 0) {
        obj.insert(QString("$permissions"), ::OpenAPI::toJsonValue(permissions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(signature));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(mime_type));
    }
    if (m_size_original_isSet) {
        obj.insert(QString("sizeOriginal"), ::OpenAPI::toJsonValue(size_original));
    }
    if (m_chunks_total_isSet) {
        obj.insert(QString("chunksTotal"), ::OpenAPI::toJsonValue(chunks_total));
    }
    if (m_chunks_uploaded_isSet) {
        obj.insert(QString("chunksUploaded"), ::OpenAPI::toJsonValue(chunks_uploaded));
    }
    return obj;
}

QString AWFileEx::getId() const {
    return id;
}
void AWFileEx::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool AWFileEx::is_id_Set() const{
    return m_id_isSet;
}

bool AWFileEx::is_id_Valid() const{
    return m_id_isValid;
}

QString AWFileEx::getBucketId() const {
    return bucket_id;
}
void AWFileEx::setBucketId(const QString &bucket_id) {
    this->bucket_id = bucket_id;
    this->m_bucket_id_isSet = true;
}

bool AWFileEx::is_bucket_id_Set() const{
    return m_bucket_id_isSet;
}

bool AWFileEx::is_bucket_id_Valid() const{
    return m_bucket_id_isValid;
}

QString AWFileEx::getCreatedAt() const {
    return created_at;
}
void AWFileEx::setCreatedAt(const QString &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool AWFileEx::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool AWFileEx::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString AWFileEx::getUpdatedAt() const {
    return updated_at;
}
void AWFileEx::setUpdatedAt(const QString &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool AWFileEx::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool AWFileEx::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<QString> AWFileEx::getPermissions() const {
    return permissions;
}
void AWFileEx::setPermissions(const QList<QString> &permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

bool AWFileEx::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool AWFileEx::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString AWFileEx::getName() const {
    return name;
}
void AWFileEx::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool AWFileEx::is_name_Set() const{
    return m_name_isSet;
}

bool AWFileEx::is_name_Valid() const{
    return m_name_isValid;
}

QString AWFileEx::getSignature() const {
    return signature;
}
void AWFileEx::setSignature(const QString &signature) {
    this->signature = signature;
    this->m_signature_isSet = true;
}

bool AWFileEx::is_signature_Set() const{
    return m_signature_isSet;
}

bool AWFileEx::is_signature_Valid() const{
    return m_signature_isValid;
}

QString AWFileEx::getMimeType() const {
    return mime_type;
}
void AWFileEx::setMimeType(const QString &mime_type) {
    this->mime_type = mime_type;
    this->m_mime_type_isSet = true;
}

bool AWFileEx::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool AWFileEx::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

qint32 AWFileEx::getSizeOriginal() const {
    return size_original;
}
void AWFileEx::setSizeOriginal(const qint32 &size_original) {
    this->size_original = size_original;
    this->m_size_original_isSet = true;
}

bool AWFileEx::is_size_original_Set() const{
    return m_size_original_isSet;
}

bool AWFileEx::is_size_original_Valid() const{
    return m_size_original_isValid;
}

qint32 AWFileEx::getChunksTotal() const {
    return chunks_total;
}
void AWFileEx::setChunksTotal(const qint32 &chunks_total) {
    this->chunks_total = chunks_total;
    this->m_chunks_total_isSet = true;
}

bool AWFileEx::is_chunks_total_Set() const{
    return m_chunks_total_isSet;
}

bool AWFileEx::is_chunks_total_Valid() const{
    return m_chunks_total_isValid;
}

qint32 AWFileEx::getChunksUploaded() const {
    return chunks_uploaded;
}
void AWFileEx::setChunksUploaded(const qint32 &chunks_uploaded) {
    this->chunks_uploaded = chunks_uploaded;
    this->m_chunks_uploaded_isSet = true;
}

bool AWFileEx::is_chunks_uploaded_Set() const{
    return m_chunks_uploaded_isSet;
}

bool AWFileEx::is_chunks_uploaded_Valid() const{
    return m_chunks_uploaded_isValid;
}

bool AWFileEx::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chunks_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chunks_uploaded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWFileEx::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_bucket_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_permissions_isValid && m_name_isValid && m_signature_isValid && m_mime_type_isValid && m_size_original_isValid && m_chunks_total_isValid && m_chunks_uploaded_isValid && true;
}

} // namespace OpenAPI
