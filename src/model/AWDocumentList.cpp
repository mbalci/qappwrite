/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWDocumentList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWDocumentList::AWDocumentList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWDocumentList::AWDocumentList() {
    this->initializeModel();
}

AWDocumentList::~AWDocumentList() {}

void AWDocumentList::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;
}

void AWDocumentList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWDocumentList::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;
}

QString AWDocumentList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWDocumentList::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(total));
    }
    if (documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(documents));
    }
    return obj;
}

qint32 AWDocumentList::getTotal() const {
    return total;
}
void AWDocumentList::setTotal(const qint32 &total) {
    this->total = total;
    this->m_total_isSet = true;
}

bool AWDocumentList::is_total_Set() const{
    return m_total_isSet;
}

bool AWDocumentList::is_total_Valid() const{
    return m_total_isValid;
}

QList<AWDocument> AWDocumentList::getDocuments() const {
    return documents;
}
void AWDocumentList::setDocuments(const QList<AWDocument> &documents) {
    this->documents = documents;
    this->m_documents_isSet = true;
}

bool AWDocumentList::is_documents_Set() const{
    return m_documents_isSet;
}

bool AWDocumentList::is_documents_Valid() const{
    return m_documents_isValid;
}

bool AWDocumentList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWDocumentList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_isValid && m_documents_isValid && true;
}

} // namespace OpenAPI
