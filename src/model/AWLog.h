/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AWLog.h
 *
 * Log
 */

#ifndef AWLOG_H
#define AWLOG_H

#include <QJsonObject>

#include <QString>

#include "src/AWEnum.h"
#include "src/AWObject.h"

#include "src/AWGlobalExport.h"

namespace OpenAPI {

class APPWRITE_EXPORT AWLog : public AWObject {
public:
    AWLog();
    AWLog(QString json);
    ~AWLog() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEvent() const;
    void setEvent(const QString &event);
    bool is_event_Set() const;
    bool is_event_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserEmail() const;
    void setUserEmail(const QString &user_email);
    bool is_user_email_Set() const;
    bool is_user_email_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getIp() const;
    void setIp(const QString &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    QString getTime() const;
    void setTime(const QString &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    QString getOsCode() const;
    void setOsCode(const QString &os_code);
    bool is_os_code_Set() const;
    bool is_os_code_Valid() const;

    QString getOsName() const;
    void setOsName(const QString &os_name);
    bool is_os_name_Set() const;
    bool is_os_name_Valid() const;

    QString getOsVersion() const;
    void setOsVersion(const QString &os_version);
    bool is_os_version_Set() const;
    bool is_os_version_Valid() const;

    QString getClientType() const;
    void setClientType(const QString &client_type);
    bool is_client_type_Set() const;
    bool is_client_type_Valid() const;

    QString getClientCode() const;
    void setClientCode(const QString &client_code);
    bool is_client_code_Set() const;
    bool is_client_code_Valid() const;

    QString getClientName() const;
    void setClientName(const QString &client_name);
    bool is_client_name_Set() const;
    bool is_client_name_Valid() const;

    QString getClientVersion() const;
    void setClientVersion(const QString &client_version);
    bool is_client_version_Set() const;
    bool is_client_version_Valid() const;

    QString getClientEngine() const;
    void setClientEngine(const QString &client_engine);
    bool is_client_engine_Set() const;
    bool is_client_engine_Valid() const;

    QString getClientEngineVersion() const;
    void setClientEngineVersion(const QString &client_engine_version);
    bool is_client_engine_version_Set() const;
    bool is_client_engine_version_Valid() const;

    QString getDeviceName() const;
    void setDeviceName(const QString &device_name);
    bool is_device_name_Set() const;
    bool is_device_name_Valid() const;

    QString getDeviceBrand() const;
    void setDeviceBrand(const QString &device_brand);
    bool is_device_brand_Set() const;
    bool is_device_brand_Valid() const;

    QString getDeviceModel() const;
    void setDeviceModel(const QString &device_model);
    bool is_device_model_Set() const;
    bool is_device_model_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getCountryName() const;
    void setCountryName(const QString &country_name);
    bool is_country_name_Set() const;
    bool is_country_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString event;
    bool m_event_isSet;
    bool m_event_isValid;

    QString user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString user_email;
    bool m_user_email_isSet;
    bool m_user_email_isValid;

    QString user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    QString mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    QString time;
    bool m_time_isSet;
    bool m_time_isValid;

    QString os_code;
    bool m_os_code_isSet;
    bool m_os_code_isValid;

    QString os_name;
    bool m_os_name_isSet;
    bool m_os_name_isValid;

    QString os_version;
    bool m_os_version_isSet;
    bool m_os_version_isValid;

    QString client_type;
    bool m_client_type_isSet;
    bool m_client_type_isValid;

    QString client_code;
    bool m_client_code_isSet;
    bool m_client_code_isValid;

    QString client_name;
    bool m_client_name_isSet;
    bool m_client_name_isValid;

    QString client_version;
    bool m_client_version_isSet;
    bool m_client_version_isValid;

    QString client_engine;
    bool m_client_engine_isSet;
    bool m_client_engine_isValid;

    QString client_engine_version;
    bool m_client_engine_version_isSet;
    bool m_client_engine_version_isValid;

    QString device_name;
    bool m_device_name_isSet;
    bool m_device_name_isValid;

    QString device_brand;
    bool m_device_brand_isSet;
    bool m_device_brand_isValid;

    QString device_model;
    bool m_device_model_isSet;
    bool m_device_model_isValid;

    QString country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString country_name;
    bool m_country_name_isSet;
    bool m_country_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::AWLog)

#endif // AWLOG_H
