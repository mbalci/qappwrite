/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWAccountUpdatePhoneRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWAccountUpdatePhoneRequest::AWAccountUpdatePhoneRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWAccountUpdatePhoneRequest::AWAccountUpdatePhoneRequest() {
    this->initializeModel();
}

AWAccountUpdatePhoneRequest::~AWAccountUpdatePhoneRequest() {}

void AWAccountUpdatePhoneRequest::initializeModel() {

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void AWAccountUpdatePhoneRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWAccountUpdatePhoneRequest::fromJsonObject(QJsonObject json) {

    m_phone_isValid = ::OpenAPI::fromJsonValue(phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;
}

QString AWAccountUpdatePhoneRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWAccountUpdatePhoneRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(phone));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(password));
    }
    return obj;
}

QString AWAccountUpdatePhoneRequest::getPhone() const {
    return phone;
}
void AWAccountUpdatePhoneRequest::setPhone(const QString &phone) {
    this->phone = phone;
    this->m_phone_isSet = true;
}

bool AWAccountUpdatePhoneRequest::is_phone_Set() const{
    return m_phone_isSet;
}

bool AWAccountUpdatePhoneRequest::is_phone_Valid() const{
    return m_phone_isValid;
}

QString AWAccountUpdatePhoneRequest::getPassword() const {
    return password;
}
void AWAccountUpdatePhoneRequest::setPassword(const QString &password) {
    this->password = password;
    this->m_password_isSet = true;
}

bool AWAccountUpdatePhoneRequest::is_password_Set() const{
    return m_password_isSet;
}

bool AWAccountUpdatePhoneRequest::is_password_Valid() const{
    return m_password_isValid;
}

bool AWAccountUpdatePhoneRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWAccountUpdatePhoneRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_phone_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
