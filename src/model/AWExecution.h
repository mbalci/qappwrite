/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AWExecution.h
 *
 * Execution
 */

#ifndef AWEXECUTION_H
#define AWEXECUTION_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "src/AWEnum.h"
#include "src/AWObject.h"

#include "src/AWGlobalExport.h"

namespace OpenAPI {

class APPWRITE_EXPORT AWExecution : public AWObject {
public:
    AWExecution();
    AWExecution(QString json);
    ~AWExecution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QList<QString> getPermissions() const;
    void setPermissions(const QList<QString> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QString getFunctionId() const;
    void setFunctionId(const QString &function_id);
    bool is_function_id_Set() const;
    bool is_function_id_Valid() const;

    QString getTrigger() const;
    void setTrigger(const QString &trigger);
    bool is_trigger_Set() const;
    bool is_trigger_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getStatusCode() const;
    void setStatusCode(const qint32 &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QString getResponse() const;
    void setResponse(const QString &response);
    bool is_response_Set() const;
    bool is_response_Valid() const;

    QString getStdout() const;
    void setStdout(const QString &stdout);
    bool is_stdout_Set() const;
    bool is_stdout_Valid() const;

    QString getStderr() const;
    void setStderr(const QString &stderr);
    bool is_stderr_Set() const;
    bool is_stderr_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QList<QString> permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QString function_id;
    bool m_function_id_isSet;
    bool m_function_id_isValid;

    QString trigger;
    bool m_trigger_isSet;
    bool m_trigger_isValid;

    QString status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QString response;
    bool m_response_isSet;
    bool m_response_isValid;

    QString stdout;
    bool m_stdout_isSet;
    bool m_stdout_isValid;

    QString stderr;
    bool m_stderr_isSet;
    bool m_stderr_isValid;

    double duration;
    bool m_duration_isSet;
    bool m_duration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::AWExecution)

#endif // AWEXECUTION_H
