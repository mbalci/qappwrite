/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWDatabasesCreateDocumentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWDatabasesCreateDocumentRequest::AWDatabasesCreateDocumentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWDatabasesCreateDocumentRequest::AWDatabasesCreateDocumentRequest() {
    this->initializeModel();
}

AWDatabasesCreateDocumentRequest::~AWDatabasesCreateDocumentRequest() {}

void AWDatabasesCreateDocumentRequest::initializeModel() {

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void AWDatabasesCreateDocumentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWDatabasesCreateDocumentRequest::fromJsonObject(QJsonObject json) {

    m_document_id_isValid = ::OpenAPI::fromJsonValue(document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString AWDatabasesCreateDocumentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWDatabasesCreateDocumentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(document_id));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(data));
    }
    if (permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(permissions));
    }
    return obj;
}

QString AWDatabasesCreateDocumentRequest::getDocumentId() const {
    return document_id;
}
void AWDatabasesCreateDocumentRequest::setDocumentId(const QString &document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

bool AWDatabasesCreateDocumentRequest::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool AWDatabasesCreateDocumentRequest::is_document_id_Valid() const{
    return m_document_id_isValid;
}

AWObject AWDatabasesCreateDocumentRequest::getData() const {
    return data;
}
void AWDatabasesCreateDocumentRequest::setData(const AWObject &data) {
    this->data = data;
    this->m_data_isSet = true;
}

bool AWDatabasesCreateDocumentRequest::is_data_Set() const{
    return m_data_isSet;
}

bool AWDatabasesCreateDocumentRequest::is_data_Valid() const{
    return m_data_isValid;
}

QList<QString> AWDatabasesCreateDocumentRequest::getPermissions() const {
    return permissions;
}
void AWDatabasesCreateDocumentRequest::setPermissions(const QList<QString> &permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

bool AWDatabasesCreateDocumentRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool AWDatabasesCreateDocumentRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool AWDatabasesCreateDocumentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWDatabasesCreateDocumentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_id_isValid && m_data_isValid && true;
}

} // namespace OpenAPI
