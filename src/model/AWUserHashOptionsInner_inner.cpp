/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWUserHashOptionsInner_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWUserHashOptionsInner_inner::AWUserHashOptionsInner_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWUserHashOptionsInner_inner::AWUserHashOptionsInner_inner() {
    this->initializeModel();
}

AWUserHashOptionsInner_inner::~AWUserHashOptionsInner_inner() {}

void AWUserHashOptionsInner_inner::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_memory_cost_isSet = false;
    m_memory_cost_isValid = false;

    m_time_cost_isSet = false;
    m_time_cost_isValid = false;

    m_threads_isSet = false;
    m_threads_isValid = false;

    m_cost_cpu_isSet = false;
    m_cost_cpu_isValid = false;

    m_cost_memory_isSet = false;
    m_cost_memory_isValid = false;

    m_cost_parallel_isSet = false;
    m_cost_parallel_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_salt_isSet = false;
    m_salt_isValid = false;

    m_salt_separator_isSet = false;
    m_salt_separator_isValid = false;

    m_signer_key_isSet = false;
    m_signer_key_isValid = false;
}

void AWUserHashOptionsInner_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWUserHashOptionsInner_inner::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_memory_cost_isValid = ::OpenAPI::fromJsonValue(memory_cost, json[QString("memoryCost")]);
    m_memory_cost_isSet = !json[QString("memoryCost")].isNull() && m_memory_cost_isValid;

    m_time_cost_isValid = ::OpenAPI::fromJsonValue(time_cost, json[QString("timeCost")]);
    m_time_cost_isSet = !json[QString("timeCost")].isNull() && m_time_cost_isValid;

    m_threads_isValid = ::OpenAPI::fromJsonValue(threads, json[QString("threads")]);
    m_threads_isSet = !json[QString("threads")].isNull() && m_threads_isValid;

    m_cost_cpu_isValid = ::OpenAPI::fromJsonValue(cost_cpu, json[QString("costCpu")]);
    m_cost_cpu_isSet = !json[QString("costCpu")].isNull() && m_cost_cpu_isValid;

    m_cost_memory_isValid = ::OpenAPI::fromJsonValue(cost_memory, json[QString("costMemory")]);
    m_cost_memory_isSet = !json[QString("costMemory")].isNull() && m_cost_memory_isValid;

    m_cost_parallel_isValid = ::OpenAPI::fromJsonValue(cost_parallel, json[QString("costParallel")]);
    m_cost_parallel_isSet = !json[QString("costParallel")].isNull() && m_cost_parallel_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_salt_isValid = ::OpenAPI::fromJsonValue(salt, json[QString("salt")]);
    m_salt_isSet = !json[QString("salt")].isNull() && m_salt_isValid;

    m_salt_separator_isValid = ::OpenAPI::fromJsonValue(salt_separator, json[QString("saltSeparator")]);
    m_salt_separator_isSet = !json[QString("saltSeparator")].isNull() && m_salt_separator_isValid;

    m_signer_key_isValid = ::OpenAPI::fromJsonValue(signer_key, json[QString("signerKey")]);
    m_signer_key_isSet = !json[QString("signerKey")].isNull() && m_signer_key_isValid;
}

QString AWUserHashOptionsInner_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWUserHashOptionsInner_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_memory_cost_isSet) {
        obj.insert(QString("memoryCost"), ::OpenAPI::toJsonValue(memory_cost));
    }
    if (m_time_cost_isSet) {
        obj.insert(QString("timeCost"), ::OpenAPI::toJsonValue(time_cost));
    }
    if (m_threads_isSet) {
        obj.insert(QString("threads"), ::OpenAPI::toJsonValue(threads));
    }
    if (m_cost_cpu_isSet) {
        obj.insert(QString("costCpu"), ::OpenAPI::toJsonValue(cost_cpu));
    }
    if (m_cost_memory_isSet) {
        obj.insert(QString("costMemory"), ::OpenAPI::toJsonValue(cost_memory));
    }
    if (m_cost_parallel_isSet) {
        obj.insert(QString("costParallel"), ::OpenAPI::toJsonValue(cost_parallel));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(length));
    }
    if (m_salt_isSet) {
        obj.insert(QString("salt"), ::OpenAPI::toJsonValue(salt));
    }
    if (m_salt_separator_isSet) {
        obj.insert(QString("saltSeparator"), ::OpenAPI::toJsonValue(salt_separator));
    }
    if (m_signer_key_isSet) {
        obj.insert(QString("signerKey"), ::OpenAPI::toJsonValue(signer_key));
    }
    return obj;
}

QString AWUserHashOptionsInner_inner::getType() const {
    return type;
}
void AWUserHashOptionsInner_inner::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_type_Set() const{
    return m_type_isSet;
}

bool AWUserHashOptionsInner_inner::is_type_Valid() const{
    return m_type_isValid;
}

qint32 AWUserHashOptionsInner_inner::getMemoryCost() const {
    return memory_cost;
}
void AWUserHashOptionsInner_inner::setMemoryCost(const qint32 &memory_cost) {
    this->memory_cost = memory_cost;
    this->m_memory_cost_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_memory_cost_Set() const{
    return m_memory_cost_isSet;
}

bool AWUserHashOptionsInner_inner::is_memory_cost_Valid() const{
    return m_memory_cost_isValid;
}

qint32 AWUserHashOptionsInner_inner::getTimeCost() const {
    return time_cost;
}
void AWUserHashOptionsInner_inner::setTimeCost(const qint32 &time_cost) {
    this->time_cost = time_cost;
    this->m_time_cost_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_time_cost_Set() const{
    return m_time_cost_isSet;
}

bool AWUserHashOptionsInner_inner::is_time_cost_Valid() const{
    return m_time_cost_isValid;
}

qint32 AWUserHashOptionsInner_inner::getThreads() const {
    return threads;
}
void AWUserHashOptionsInner_inner::setThreads(const qint32 &threads) {
    this->threads = threads;
    this->m_threads_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_threads_Set() const{
    return m_threads_isSet;
}

bool AWUserHashOptionsInner_inner::is_threads_Valid() const{
    return m_threads_isValid;
}

qint32 AWUserHashOptionsInner_inner::getCostCpu() const {
    return cost_cpu;
}
void AWUserHashOptionsInner_inner::setCostCpu(const qint32 &cost_cpu) {
    this->cost_cpu = cost_cpu;
    this->m_cost_cpu_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_cost_cpu_Set() const{
    return m_cost_cpu_isSet;
}

bool AWUserHashOptionsInner_inner::is_cost_cpu_Valid() const{
    return m_cost_cpu_isValid;
}

qint32 AWUserHashOptionsInner_inner::getCostMemory() const {
    return cost_memory;
}
void AWUserHashOptionsInner_inner::setCostMemory(const qint32 &cost_memory) {
    this->cost_memory = cost_memory;
    this->m_cost_memory_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_cost_memory_Set() const{
    return m_cost_memory_isSet;
}

bool AWUserHashOptionsInner_inner::is_cost_memory_Valid() const{
    return m_cost_memory_isValid;
}

qint32 AWUserHashOptionsInner_inner::getCostParallel() const {
    return cost_parallel;
}
void AWUserHashOptionsInner_inner::setCostParallel(const qint32 &cost_parallel) {
    this->cost_parallel = cost_parallel;
    this->m_cost_parallel_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_cost_parallel_Set() const{
    return m_cost_parallel_isSet;
}

bool AWUserHashOptionsInner_inner::is_cost_parallel_Valid() const{
    return m_cost_parallel_isValid;
}

qint32 AWUserHashOptionsInner_inner::getLength() const {
    return length;
}
void AWUserHashOptionsInner_inner::setLength(const qint32 &length) {
    this->length = length;
    this->m_length_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_length_Set() const{
    return m_length_isSet;
}

bool AWUserHashOptionsInner_inner::is_length_Valid() const{
    return m_length_isValid;
}

QString AWUserHashOptionsInner_inner::getSalt() const {
    return salt;
}
void AWUserHashOptionsInner_inner::setSalt(const QString &salt) {
    this->salt = salt;
    this->m_salt_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_salt_Set() const{
    return m_salt_isSet;
}

bool AWUserHashOptionsInner_inner::is_salt_Valid() const{
    return m_salt_isValid;
}

QString AWUserHashOptionsInner_inner::getSaltSeparator() const {
    return salt_separator;
}
void AWUserHashOptionsInner_inner::setSaltSeparator(const QString &salt_separator) {
    this->salt_separator = salt_separator;
    this->m_salt_separator_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_salt_separator_Set() const{
    return m_salt_separator_isSet;
}

bool AWUserHashOptionsInner_inner::is_salt_separator_Valid() const{
    return m_salt_separator_isValid;
}

QString AWUserHashOptionsInner_inner::getSignerKey() const {
    return signer_key;
}
void AWUserHashOptionsInner_inner::setSignerKey(const QString &signer_key) {
    this->signer_key = signer_key;
    this->m_signer_key_isSet = true;
}

bool AWUserHashOptionsInner_inner::is_signer_key_Set() const{
    return m_signer_key_isSet;
}

bool AWUserHashOptionsInner_inner::is_signer_key_Valid() const{
    return m_signer_key_isValid;
}

bool AWUserHashOptionsInner_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_parallel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salt_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signer_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWUserHashOptionsInner_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_memory_cost_isValid && m_time_cost_isValid && m_threads_isValid && m_cost_cpu_isValid && m_cost_memory_isValid && m_cost_parallel_isValid && m_length_isValid && m_salt_isValid && m_salt_separator_isValid && m_signer_key_isValid && true;
}

} // namespace OpenAPI
