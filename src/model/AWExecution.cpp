/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWExecution::AWExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWExecution::AWExecution() {
    this->initializeModel();
}

AWExecution::~AWExecution() {}

void AWExecution::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_function_id_isSet = false;
    m_function_id_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_stdout_isSet = false;
    m_stdout_isValid = false;

    m_stderr_isSet = false;
    m_stderr_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;
}

void AWExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWExecution::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("$createdAt")]);
    m_created_at_isSet = !json[QString("$createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("$updatedAt")]);
    m_updated_at_isSet = !json[QString("$updatedAt")].isNull() && m_updated_at_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(permissions, json[QString("$permissions")]);
    m_permissions_isSet = !json[QString("$permissions")].isNull() && m_permissions_isValid;

    m_function_id_isValid = ::OpenAPI::fromJsonValue(function_id, json[QString("functionId")]);
    m_function_id_isSet = !json[QString("functionId")].isNull() && m_function_id_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_stdout_isValid = ::OpenAPI::fromJsonValue(stdout, json[QString("stdout")]);
    m_stdout_isSet = !json[QString("stdout")].isNull() && m_stdout_isValid;

    m_stderr_isValid = ::OpenAPI::fromJsonValue(stderr, json[QString("stderr")]);
    m_stderr_isSet = !json[QString("stderr")].isNull() && m_stderr_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;
}

QString AWExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("$createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("$updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (permissions.size() > 0) {
        obj.insert(QString("$permissions"), ::OpenAPI::toJsonValue(permissions));
    }
    if (m_function_id_isSet) {
        obj.insert(QString("functionId"), ::OpenAPI::toJsonValue(function_id));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(trigger));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(status_code));
    }
    if (m_response_isSet) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(response));
    }
    if (m_stdout_isSet) {
        obj.insert(QString("stdout"), ::OpenAPI::toJsonValue(stdout));
    }
    if (m_stderr_isSet) {
        obj.insert(QString("stderr"), ::OpenAPI::toJsonValue(stderr));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(duration));
    }
    return obj;
}

QString AWExecution::getId() const {
    return id;
}
void AWExecution::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool AWExecution::is_id_Set() const{
    return m_id_isSet;
}

bool AWExecution::is_id_Valid() const{
    return m_id_isValid;
}

QString AWExecution::getCreatedAt() const {
    return created_at;
}
void AWExecution::setCreatedAt(const QString &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool AWExecution::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool AWExecution::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString AWExecution::getUpdatedAt() const {
    return updated_at;
}
void AWExecution::setUpdatedAt(const QString &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool AWExecution::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool AWExecution::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<QString> AWExecution::getPermissions() const {
    return permissions;
}
void AWExecution::setPermissions(const QList<QString> &permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

bool AWExecution::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool AWExecution::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString AWExecution::getFunctionId() const {
    return function_id;
}
void AWExecution::setFunctionId(const QString &function_id) {
    this->function_id = function_id;
    this->m_function_id_isSet = true;
}

bool AWExecution::is_function_id_Set() const{
    return m_function_id_isSet;
}

bool AWExecution::is_function_id_Valid() const{
    return m_function_id_isValid;
}

QString AWExecution::getTrigger() const {
    return trigger;
}
void AWExecution::setTrigger(const QString &trigger) {
    this->trigger = trigger;
    this->m_trigger_isSet = true;
}

bool AWExecution::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool AWExecution::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QString AWExecution::getStatus() const {
    return status;
}
void AWExecution::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool AWExecution::is_status_Set() const{
    return m_status_isSet;
}

bool AWExecution::is_status_Valid() const{
    return m_status_isValid;
}

qint32 AWExecution::getStatusCode() const {
    return status_code;
}
void AWExecution::setStatusCode(const qint32 &status_code) {
    this->status_code = status_code;
    this->m_status_code_isSet = true;
}

bool AWExecution::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool AWExecution::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString AWExecution::getResponse() const {
    return response;
}
void AWExecution::setResponse(const QString &response) {
    this->response = response;
    this->m_response_isSet = true;
}

bool AWExecution::is_response_Set() const{
    return m_response_isSet;
}

bool AWExecution::is_response_Valid() const{
    return m_response_isValid;
}

QString AWExecution::getStdout() const {
    return stdout;
}
void AWExecution::setStdout(const QString &stdout) {
    this->stdout = stdout;
    this->m_stdout_isSet = true;
}

bool AWExecution::is_stdout_Set() const{
    return m_stdout_isSet;
}

bool AWExecution::is_stdout_Valid() const{
    return m_stdout_isValid;
}

QString AWExecution::getStderr() const {
    return stderr;
}
void AWExecution::setStderr(const QString &stderr) {
    this->stderr = stderr;
    this->m_stderr_isSet = true;
}

bool AWExecution::is_stderr_Set() const{
    return m_stderr_isSet;
}

bool AWExecution::is_stderr_Valid() const{
    return m_stderr_isValid;
}

double AWExecution::getDuration() const {
    return duration;
}
void AWExecution::setDuration(const double &duration) {
    this->duration = duration;
    this->m_duration_isSet = true;
}

bool AWExecution::is_duration_Set() const{
    return m_duration_isSet;
}

bool AWExecution::is_duration_Valid() const{
    return m_duration_isValid;
}

bool AWExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stderr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_permissions_isValid && m_function_id_isValid && m_trigger_isValid && m_status_isValid && m_status_code_isValid && m_response_isValid && m_stdout_isValid && m_stderr_isValid && m_duration_isValid && true;
}

} // namespace OpenAPI
