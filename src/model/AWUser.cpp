/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWUser::AWUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWUser::AWUser() {
    this->initializeModel();
}

AWUser::~AWUser() {}

void AWUser::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_hash_options_isSet = false;
    m_hash_options_isValid = false;

    m_registration_isSet = false;
    m_registration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_password_update_isSet = false;
    m_password_update_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_email_verification_isSet = false;
    m_email_verification_isValid = false;

    m_phone_verification_isSet = false;
    m_phone_verification_isValid = false;
}

void AWUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWUser::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("$createdAt")]);
    m_created_at_isSet = !json[QString("$createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("$updatedAt")]);
    m_updated_at_isSet = !json[QString("$updatedAt")].isNull() && m_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_hash_options_isValid = ::OpenAPI::fromJsonValue(hash_options, json[QString("hashOptions")]);
    m_hash_options_isSet = !json[QString("hashOptions")].isNull() && m_hash_options_isValid;

    m_registration_isValid = ::OpenAPI::fromJsonValue(registration, json[QString("registration")]);
    m_registration_isSet = !json[QString("registration")].isNull() && m_registration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_password_update_isValid = ::OpenAPI::fromJsonValue(password_update, json[QString("passwordUpdate")]);
    m_password_update_isSet = !json[QString("passwordUpdate")].isNull() && m_password_update_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_email_verification_isValid = ::OpenAPI::fromJsonValue(email_verification, json[QString("emailVerification")]);
    m_email_verification_isSet = !json[QString("emailVerification")].isNull() && m_email_verification_isValid;

    m_phone_verification_isValid = ::OpenAPI::fromJsonValue(phone_verification, json[QString("phoneVerification")]);
    m_phone_verification_isSet = !json[QString("phoneVerification")].isNull() && m_phone_verification_isValid;
}

QString AWUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWUser::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("$createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("$updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(password));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(hash));
    }
    if (hash_options.size() > 0) {
        obj.insert(QString("hashOptions"), ::OpenAPI::toJsonValue(hash_options));
    }
    if (m_registration_isSet) {
        obj.insert(QString("registration"), ::OpenAPI::toJsonValue(registration));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_password_update_isSet) {
        obj.insert(QString("passwordUpdate"), ::OpenAPI::toJsonValue(password_update));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(email));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(phone));
    }
    if (m_email_verification_isSet) {
        obj.insert(QString("emailVerification"), ::OpenAPI::toJsonValue(email_verification));
    }
    if (m_phone_verification_isSet) {
        obj.insert(QString("phoneVerification"), ::OpenAPI::toJsonValue(phone_verification));
    }
    return obj;
}

QString AWUser::getId() const {
    return id;
}
void AWUser::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool AWUser::is_id_Set() const{
    return m_id_isSet;
}

bool AWUser::is_id_Valid() const{
    return m_id_isValid;
}

QString AWUser::getCreatedAt() const {
    return created_at;
}
void AWUser::setCreatedAt(const QString &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool AWUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool AWUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString AWUser::getUpdatedAt() const {
    return updated_at;
}
void AWUser::setUpdatedAt(const QString &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool AWUser::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool AWUser::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString AWUser::getName() const {
    return name;
}
void AWUser::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool AWUser::is_name_Set() const{
    return m_name_isSet;
}

bool AWUser::is_name_Valid() const{
    return m_name_isValid;
}

QString AWUser::getPassword() const {
    return password;
}
void AWUser::setPassword(const QString &password) {
    this->password = password;
    this->m_password_isSet = true;
}

bool AWUser::is_password_Set() const{
    return m_password_isSet;
}

bool AWUser::is_password_Valid() const{
    return m_password_isValid;
}

QString AWUser::getHash() const {
    return hash;
}
void AWUser::setHash(const QString &hash) {
    this->hash = hash;
    this->m_hash_isSet = true;
}

bool AWUser::is_hash_Set() const{
    return m_hash_isSet;
}

bool AWUser::is_hash_Valid() const{
    return m_hash_isValid;
}

QList<AWUserHashOptionsInner_inner> AWUser::getHashOptions() const {
    return hash_options;
}
void AWUser::setHashOptions(const QList<AWUserHashOptionsInner_inner> &hash_options) {
    this->hash_options = hash_options;
    this->m_hash_options_isSet = true;
}

bool AWUser::is_hash_options_Set() const{
    return m_hash_options_isSet;
}

bool AWUser::is_hash_options_Valid() const{
    return m_hash_options_isValid;
}

QString AWUser::getRegistration() const {
    return registration;
}
void AWUser::setRegistration(const QString &registration) {
    this->registration = registration;
    this->m_registration_isSet = true;
}

bool AWUser::is_registration_Set() const{
    return m_registration_isSet;
}

bool AWUser::is_registration_Valid() const{
    return m_registration_isValid;
}

bool AWUser::isStatus() const {
    return status;
}
void AWUser::setStatus(const bool &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool AWUser::is_status_Set() const{
    return m_status_isSet;
}

bool AWUser::is_status_Valid() const{
    return m_status_isValid;
}

QString AWUser::getPasswordUpdate() const {
    return password_update;
}
void AWUser::setPasswordUpdate(const QString &password_update) {
    this->password_update = password_update;
    this->m_password_update_isSet = true;
}

bool AWUser::is_password_update_Set() const{
    return m_password_update_isSet;
}

bool AWUser::is_password_update_Valid() const{
    return m_password_update_isValid;
}

QString AWUser::getEmail() const {
    return email;
}
void AWUser::setEmail(const QString &email) {
    this->email = email;
    this->m_email_isSet = true;
}

bool AWUser::is_email_Set() const{
    return m_email_isSet;
}

bool AWUser::is_email_Valid() const{
    return m_email_isValid;
}

QString AWUser::getPhone() const {
    return phone;
}
void AWUser::setPhone(const QString &phone) {
    this->phone = phone;
    this->m_phone_isSet = true;
}

bool AWUser::is_phone_Set() const{
    return m_phone_isSet;
}

bool AWUser::is_phone_Valid() const{
    return m_phone_isValid;
}

bool AWUser::isEmailVerification() const {
    return email_verification;
}
void AWUser::setEmailVerification(const bool &email_verification) {
    this->email_verification = email_verification;
    this->m_email_verification_isSet = true;
}

bool AWUser::is_email_verification_Set() const{
    return m_email_verification_isSet;
}

bool AWUser::is_email_verification_Valid() const{
    return m_email_verification_isValid;
}

bool AWUser::isPhoneVerification() const {
    return phone_verification;
}
void AWUser::setPhoneVerification(const bool &phone_verification) {
    this->phone_verification = phone_verification;
    this->m_phone_verification_isSet = true;
}

bool AWUser::is_phone_verification_Set() const{
    return m_phone_verification_isSet;
}

bool AWUser::is_phone_verification_Valid() const{
    return m_phone_verification_isValid;
}

bool AWUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (hash_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_verification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_name_isValid && m_registration_isValid && m_status_isValid && m_password_update_isValid && m_email_isValid && m_phone_isValid && m_email_verification_isValid && m_phone_verification_isValid && true;
}

} // namespace OpenAPI
