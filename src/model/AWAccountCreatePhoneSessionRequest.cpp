/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWAccountCreatePhoneSessionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWAccountCreatePhoneSessionRequest::AWAccountCreatePhoneSessionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWAccountCreatePhoneSessionRequest::AWAccountCreatePhoneSessionRequest() {
    this->initializeModel();
}

AWAccountCreatePhoneSessionRequest::~AWAccountCreatePhoneSessionRequest() {}

void AWAccountCreatePhoneSessionRequest::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void AWAccountCreatePhoneSessionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWAccountCreatePhoneSessionRequest::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::OpenAPI::fromJsonValue(user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;
}

QString AWAccountCreatePhoneSessionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWAccountCreatePhoneSessionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(user_id));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(phone));
    }
    return obj;
}

QString AWAccountCreatePhoneSessionRequest::getUserId() const {
    return user_id;
}
void AWAccountCreatePhoneSessionRequest::setUserId(const QString &user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

bool AWAccountCreatePhoneSessionRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool AWAccountCreatePhoneSessionRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString AWAccountCreatePhoneSessionRequest::getPhone() const {
    return phone;
}
void AWAccountCreatePhoneSessionRequest::setPhone(const QString &phone) {
    this->phone = phone;
    this->m_phone_isSet = true;
}

bool AWAccountCreatePhoneSessionRequest::is_phone_Set() const{
    return m_phone_isSet;
}

bool AWAccountCreatePhoneSessionRequest::is_phone_Valid() const{
    return m_phone_isValid;
}

bool AWAccountCreatePhoneSessionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWAccountCreatePhoneSessionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && m_phone_isValid && true;
}

} // namespace OpenAPI
