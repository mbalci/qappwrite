/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWLocale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWLocale::AWLocale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWLocale::AWLocale() {
    this->initializeModel();
}

AWLocale::~AWLocale() {}

void AWLocale::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_continent_isSet = false;
    m_continent_isValid = false;

    m_eu_isSet = false;
    m_eu_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;
}

void AWLocale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWLocale::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(continent_code, json[QString("continentCode")]);
    m_continent_code_isSet = !json[QString("continentCode")].isNull() && m_continent_code_isValid;

    m_continent_isValid = ::OpenAPI::fromJsonValue(continent, json[QString("continent")]);
    m_continent_isSet = !json[QString("continent")].isNull() && m_continent_isValid;

    m_eu_isValid = ::OpenAPI::fromJsonValue(eu, json[QString("eu")]);
    m_eu_isSet = !json[QString("eu")].isNull() && m_eu_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;
}

QString AWLocale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWLocale::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(ip));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(country_code));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(country));
    }
    if (m_continent_code_isSet) {
        obj.insert(QString("continentCode"), ::OpenAPI::toJsonValue(continent_code));
    }
    if (m_continent_isSet) {
        obj.insert(QString("continent"), ::OpenAPI::toJsonValue(continent));
    }
    if (m_eu_isSet) {
        obj.insert(QString("eu"), ::OpenAPI::toJsonValue(eu));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(currency));
    }
    return obj;
}

QString AWLocale::getIp() const {
    return ip;
}
void AWLocale::setIp(const QString &ip) {
    this->ip = ip;
    this->m_ip_isSet = true;
}

bool AWLocale::is_ip_Set() const{
    return m_ip_isSet;
}

bool AWLocale::is_ip_Valid() const{
    return m_ip_isValid;
}

QString AWLocale::getCountryCode() const {
    return country_code;
}
void AWLocale::setCountryCode(const QString &country_code) {
    this->country_code = country_code;
    this->m_country_code_isSet = true;
}

bool AWLocale::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool AWLocale::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString AWLocale::getCountry() const {
    return country;
}
void AWLocale::setCountry(const QString &country) {
    this->country = country;
    this->m_country_isSet = true;
}

bool AWLocale::is_country_Set() const{
    return m_country_isSet;
}

bool AWLocale::is_country_Valid() const{
    return m_country_isValid;
}

QString AWLocale::getContinentCode() const {
    return continent_code;
}
void AWLocale::setContinentCode(const QString &continent_code) {
    this->continent_code = continent_code;
    this->m_continent_code_isSet = true;
}

bool AWLocale::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool AWLocale::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

QString AWLocale::getContinent() const {
    return continent;
}
void AWLocale::setContinent(const QString &continent) {
    this->continent = continent;
    this->m_continent_isSet = true;
}

bool AWLocale::is_continent_Set() const{
    return m_continent_isSet;
}

bool AWLocale::is_continent_Valid() const{
    return m_continent_isValid;
}

bool AWLocale::isEu() const {
    return eu;
}
void AWLocale::setEu(const bool &eu) {
    this->eu = eu;
    this->m_eu_isSet = true;
}

bool AWLocale::is_eu_Set() const{
    return m_eu_isSet;
}

bool AWLocale::is_eu_Valid() const{
    return m_eu_isValid;
}

QString AWLocale::getCurrency() const {
    return currency;
}
void AWLocale::setCurrency(const QString &currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

bool AWLocale::is_currency_Set() const{
    return m_currency_isSet;
}

bool AWLocale::is_currency_Valid() const{
    return m_currency_isValid;
}

bool AWLocale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWLocale::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ip_isValid && m_country_code_isValid && m_country_isValid && m_continent_code_isValid && m_continent_isValid && m_eu_isValid && m_currency_isValid && true;
}

} // namespace OpenAPI
