/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWTeamsCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "src/AWHelpers.h"

namespace OpenAPI {

AWTeamsCreateRequest::AWTeamsCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

AWTeamsCreateRequest::AWTeamsCreateRequest() {
    this->initializeModel();
}

AWTeamsCreateRequest::~AWTeamsCreateRequest() {}

void AWTeamsCreateRequest::initializeModel() {

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void AWTeamsCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void AWTeamsCreateRequest::fromJsonObject(QJsonObject json) {

    m_team_id_isValid = ::OpenAPI::fromJsonValue(team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString AWTeamsCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject AWTeamsCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(team_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(roles));
    }
    return obj;
}

QString AWTeamsCreateRequest::getTeamId() const {
    return team_id;
}
void AWTeamsCreateRequest::setTeamId(const QString &team_id) {
    this->team_id = team_id;
    this->m_team_id_isSet = true;
}

bool AWTeamsCreateRequest::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool AWTeamsCreateRequest::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString AWTeamsCreateRequest::getName() const {
    return name;
}
void AWTeamsCreateRequest::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool AWTeamsCreateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool AWTeamsCreateRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> AWTeamsCreateRequest::getRoles() const {
    return roles;
}
void AWTeamsCreateRequest::setRoles(const QList<QString> &roles) {
    this->roles = roles;
    this->m_roles_isSet = true;
}

bool AWTeamsCreateRequest::is_roles_Set() const{
    return m_roles_isSet;
}

bool AWTeamsCreateRequest::is_roles_Valid() const{
    return m_roles_isValid;
}

bool AWTeamsCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool AWTeamsCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_team_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
