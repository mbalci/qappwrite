/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWAccountApi.h"
#include "src/AWServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

AWAccountApi::AWAccountApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

AWAccountApi::~AWAccountApi() {
}

void AWAccountApi::initializeServerConfigs() {
    //Default server
    QList<AWServerConfiguration> defaultConf = QList<AWServerConfiguration>();
    //varying endpoint server
    defaultConf.append(AWServerConfiguration(
    QUrl("https://HOSTNAME/v1"),
    "No description provided",
    QMap<QString, AWServerVariable>()));
    _serverConfigs.insert("accountCreate", defaultConf);
    _serverIndices.insert("accountCreate", 0);
    _serverConfigs.insert("accountCreateAnonymousSession", defaultConf);
    _serverIndices.insert("accountCreateAnonymousSession", 0);
    _serverConfigs.insert("accountCreateEmailSession", defaultConf);
    _serverIndices.insert("accountCreateEmailSession", 0);
    _serverConfigs.insert("accountCreateJWT", defaultConf);
    _serverIndices.insert("accountCreateJWT", 0);
    _serverConfigs.insert("accountCreateMagicURLSession", defaultConf);
    _serverIndices.insert("accountCreateMagicURLSession", 0);
    _serverConfigs.insert("accountCreateOAuth2Session", defaultConf);
    _serverIndices.insert("accountCreateOAuth2Session", 0);
    _serverConfigs.insert("accountCreatePhoneSession", defaultConf);
    _serverIndices.insert("accountCreatePhoneSession", 0);
    _serverConfigs.insert("accountCreatePhoneVerification", defaultConf);
    _serverIndices.insert("accountCreatePhoneVerification", 0);
    _serverConfigs.insert("accountCreateRecovery", defaultConf);
    _serverIndices.insert("accountCreateRecovery", 0);
    _serverConfigs.insert("accountCreateVerification", defaultConf);
    _serverIndices.insert("accountCreateVerification", 0);
    _serverConfigs.insert("accountDeleteSession", defaultConf);
    _serverIndices.insert("accountDeleteSession", 0);
    _serverConfigs.insert("accountDeleteSessions", defaultConf);
    _serverIndices.insert("accountDeleteSessions", 0);
    _serverConfigs.insert("accountGet", defaultConf);
    _serverIndices.insert("accountGet", 0);
    _serverConfigs.insert("accountGetPrefs", defaultConf);
    _serverIndices.insert("accountGetPrefs", 0);
    _serverConfigs.insert("accountGetSession", defaultConf);
    _serverIndices.insert("accountGetSession", 0);
    _serverConfigs.insert("accountListLogs", defaultConf);
    _serverIndices.insert("accountListLogs", 0);
    _serverConfigs.insert("accountListSessions", defaultConf);
    _serverIndices.insert("accountListSessions", 0);
    _serverConfigs.insert("accountUpdateEmail", defaultConf);
    _serverIndices.insert("accountUpdateEmail", 0);
    _serverConfigs.insert("accountUpdateMagicURLSession", defaultConf);
    _serverIndices.insert("accountUpdateMagicURLSession", 0);
    _serverConfigs.insert("accountUpdateName", defaultConf);
    _serverIndices.insert("accountUpdateName", 0);
    _serverConfigs.insert("accountUpdatePassword", defaultConf);
    _serverIndices.insert("accountUpdatePassword", 0);
    _serverConfigs.insert("accountUpdatePhone", defaultConf);
    _serverIndices.insert("accountUpdatePhone", 0);
    _serverConfigs.insert("accountUpdatePhoneSession", defaultConf);
    _serverIndices.insert("accountUpdatePhoneSession", 0);
    _serverConfigs.insert("accountUpdatePhoneVerification", defaultConf);
    _serverIndices.insert("accountUpdatePhoneVerification", 0);
    _serverConfigs.insert("accountUpdatePrefs", defaultConf);
    _serverIndices.insert("accountUpdatePrefs", 0);
    _serverConfigs.insert("accountUpdateRecovery", defaultConf);
    _serverIndices.insert("accountUpdateRecovery", 0);
    _serverConfigs.insert("accountUpdateSession", defaultConf);
    _serverIndices.insert("accountUpdateSession", 0);
    _serverConfigs.insert("accountUpdateStatus", defaultConf);
    _serverIndices.insert("accountUpdateStatus", 0);
    _serverConfigs.insert("accountUpdateVerification", defaultConf);
    _serverIndices.insert("accountUpdateVerification", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int AWAccountApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void AWAccountApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void AWAccountApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void AWAccountApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void AWAccountApi::setUsername(const QString &username) {
    _username = username;
}

void AWAccountApi::setPassword(const QString &password) {
    _password = password;
}


void AWAccountApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void AWAccountApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void AWAccountApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int AWAccountApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, AWServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(AWServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void AWAccountApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, AWServerVariable> &variables) {
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
#else
    for (auto &e : _serverIndices.keys()) {
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
#endif
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void AWAccountApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, AWServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void AWAccountApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void AWAccountApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void AWAccountApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void AWAccountApi::abortRequests() {
    emit abortRequestsSignal();
}

QString AWAccountApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString AWAccountApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString AWAccountApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void AWAccountApi::accountCreate(const ::OpenAPI::OptionalParam<AWAccountCreateRequest> &aw_account_create_request) {
    QString fullPath = QString(_serverConfigs["accountCreate"][_serverIndices.value("accountCreate")].URL()+"/account");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_account_create_request.hasValue()){

        
        QByteArray output = aw_account_create_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateSignal(output);
        emit accountCreateSignalFull(worker, output);
    } else {
        emit accountCreateSignalE(output, error_type, error_str);
        emit accountCreateSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreateAnonymousSession() {
    QString fullPath = QString(_serverConfigs["accountCreateAnonymousSession"][_serverIndices.value("accountCreateAnonymousSession")].URL()+"/account/sessions/anonymous");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateAnonymousSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateAnonymousSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWSession output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateAnonymousSessionSignal(output);
        emit accountCreateAnonymousSessionSignalFull(worker, output);
    } else {
        emit accountCreateAnonymousSessionSignalE(output, error_type, error_str);
        emit accountCreateAnonymousSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreateEmailSession(const ::OpenAPI::OptionalParam<AWAccountCreateEmailSessionRequest> &aw_account_create_email_session_request) {
    QString fullPath = QString(_serverConfigs["accountCreateEmailSession"][_serverIndices.value("accountCreateEmailSession")].URL()+"/account/sessions/email");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_account_create_email_session_request.hasValue()){

        
        QByteArray output = aw_account_create_email_session_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateEmailSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateEmailSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWSession output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateEmailSessionSignal(output);
        emit accountCreateEmailSessionSignalFull(worker, output);
    } else {
        emit accountCreateEmailSessionSignalE(output, error_type, error_str);
        emit accountCreateEmailSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreateJWT() {
    QString fullPath = QString(_serverConfigs["accountCreateJWT"][_serverIndices.value("accountCreateJWT")].URL()+"/account/jwt");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateJWTCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateJWTCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWJwt output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateJWTSignal(output);
        emit accountCreateJWTSignalFull(worker, output);
    } else {
        emit accountCreateJWTSignalE(output, error_type, error_str);
        emit accountCreateJWTSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreateMagicURLSession(const ::OpenAPI::OptionalParam<AWAccountCreateMagicURLSessionRequest> &aw_account_create_magic_url_session_request) {
    QString fullPath = QString(_serverConfigs["accountCreateMagicURLSession"][_serverIndices.value("accountCreateMagicURLSession")].URL()+"/account/sessions/magic-url");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_account_create_magic_url_session_request.hasValue()){

        
        QByteArray output = aw_account_create_magic_url_session_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateMagicURLSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateMagicURLSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateMagicURLSessionSignal(output);
        emit accountCreateMagicURLSessionSignalFull(worker, output);
    } else {
        emit accountCreateMagicURLSessionSignalE(output, error_type, error_str);
        emit accountCreateMagicURLSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreateOAuth2Session(const QString &provider, const ::OpenAPI::OptionalParam<QString> &success, const ::OpenAPI::OptionalParam<QString> &failure, const ::OpenAPI::OptionalParam<QList<QString>> &scopes) {
    QString fullPath = QString(_serverConfigs["accountCreateOAuth2Session"][_serverIndices.value("accountCreateOAuth2Session")].URL()+"/account/sessions/oauth2/{provider}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    
    {
        QString providerPathParam("{");
        providerPathParam.append("provider").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "provider", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"provider"+pathSuffix : pathPrefix;
        fullPath.replace(providerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(provider)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (success.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "success", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("success")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(success.value())));
    }
    if (failure.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "failure", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("failure")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(failure.value())));
    }
    if (scopes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scopes", true);
        if (scopes.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : scopes.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("scopes=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("scopes").append(querySuffix);
                qint32 count = 0;
                for (QString t : scopes.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("scopes").append(querySuffix);
                qint32 count = 0;
                for (QString t : scopes.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("scopes").append(querySuffix);
                qint32 count = 0;
                for (QString t : scopes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("scopes").append(querySuffix);
                qint32 count = 0;
                for (QString t : scopes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("scopes").append(querySuffix);
                qint32 count = 0;
                for (QString t : scopes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateOAuth2SessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateOAuth2SessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateOAuth2SessionSignal();
        emit accountCreateOAuth2SessionSignalFull(worker);
    } else {
        emit accountCreateOAuth2SessionSignalE(error_type, error_str);
        emit accountCreateOAuth2SessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreatePhoneSession(const ::OpenAPI::OptionalParam<AWAccountCreatePhoneSessionRequest> &aw_account_create_phone_session_request) {
    QString fullPath = QString(_serverConfigs["accountCreatePhoneSession"][_serverIndices.value("accountCreatePhoneSession")].URL()+"/account/sessions/phone");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_account_create_phone_session_request.hasValue()){

        
        QByteArray output = aw_account_create_phone_session_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreatePhoneSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreatePhoneSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreatePhoneSessionSignal(output);
        emit accountCreatePhoneSessionSignalFull(worker, output);
    } else {
        emit accountCreatePhoneSessionSignalE(output, error_type, error_str);
        emit accountCreatePhoneSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreatePhoneVerification() {
    QString fullPath = QString(_serverConfigs["accountCreatePhoneVerification"][_serverIndices.value("accountCreatePhoneVerification")].URL()+"/account/verification/phone");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreatePhoneVerificationCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreatePhoneVerificationCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreatePhoneVerificationSignal(output);
        emit accountCreatePhoneVerificationSignalFull(worker, output);
    } else {
        emit accountCreatePhoneVerificationSignalE(output, error_type, error_str);
        emit accountCreatePhoneVerificationSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreateRecovery(const ::OpenAPI::OptionalParam<AWAccountCreateRecoveryRequest> &aw_account_create_recovery_request) {
    QString fullPath = QString(_serverConfigs["accountCreateRecovery"][_serverIndices.value("accountCreateRecovery")].URL()+"/account/recovery");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_account_create_recovery_request.hasValue()){

        
        QByteArray output = aw_account_create_recovery_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateRecoveryCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateRecoveryCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateRecoverySignal(output);
        emit accountCreateRecoverySignalFull(worker, output);
    } else {
        emit accountCreateRecoverySignalE(output, error_type, error_str);
        emit accountCreateRecoverySignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountCreateVerification(const ::OpenAPI::OptionalParam<AWAccountCreateVerificationRequest> &aw_account_create_verification_request) {
    QString fullPath = QString(_serverConfigs["accountCreateVerification"][_serverIndices.value("accountCreateVerification")].URL()+"/account/verification");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_account_create_verification_request.hasValue()){

        
        QByteArray output = aw_account_create_verification_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountCreateVerificationCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountCreateVerificationCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountCreateVerificationSignal(output);
        emit accountCreateVerificationSignalFull(worker, output);
    } else {
        emit accountCreateVerificationSignalE(output, error_type, error_str);
        emit accountCreateVerificationSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountDeleteSession(const QString &session_id) {
    QString fullPath = QString(_serverConfigs["accountDeleteSession"][_serverIndices.value("accountDeleteSession")].URL()+"/account/sessions/{sessionId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionId"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "DELETE");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountDeleteSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountDeleteSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountDeleteSessionSignal();
        emit accountDeleteSessionSignalFull(worker);
    } else {
        emit accountDeleteSessionSignalE(error_type, error_str);
        emit accountDeleteSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountDeleteSessions() {
    QString fullPath = QString(_serverConfigs["accountDeleteSessions"][_serverIndices.value("accountDeleteSessions")].URL()+"/account/sessions");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "DELETE");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountDeleteSessionsCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountDeleteSessionsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountDeleteSessionsSignal();
        emit accountDeleteSessionsSignalFull(worker);
    } else {
        emit accountDeleteSessionsSignalE(error_type, error_str);
        emit accountDeleteSessionsSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountGet() {
    QString fullPath = QString(_serverConfigs["accountGet"][_serverIndices.value("accountGet")].URL()+"/account");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountGetCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountGetCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountGetSignal(output);
        emit accountGetSignalFull(worker, output);
    } else {
        emit accountGetSignalE(output, error_type, error_str);
        emit accountGetSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountGetPrefs() {
    QString fullPath = QString(_serverConfigs["accountGetPrefs"][_serverIndices.value("accountGetPrefs")].URL()+"/account/prefs");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountGetPrefsCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountGetPrefsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QJsonValue> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QJsonValue val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountGetPrefsSignal(output);
        emit accountGetPrefsSignalFull(worker, output);
    } else {
        emit accountGetPrefsSignalE(output, error_type, error_str);
        emit accountGetPrefsSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountGetSession(const QString &session_id) {
    QString fullPath = QString(_serverConfigs["accountGetSession"][_serverIndices.value("accountGetSession")].URL()+"/account/sessions/{sessionId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionId"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountGetSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountGetSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWSession output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountGetSessionSignal(output);
        emit accountGetSessionSignalFull(worker, output);
    } else {
        emit accountGetSessionSignalE(output, error_type, error_str);
        emit accountGetSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountListLogs(const ::OpenAPI::OptionalParam<QList<QString>> &queries) {
    QString fullPath = QString(_serverConfigs["accountListLogs"][_serverIndices.value("accountListLogs")].URL()+"/account/logs");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (queries.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queries", true);
        if (queries.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : queries.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("queries=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountListLogsCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountListLogsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWLogList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountListLogsSignal(output);
        emit accountListLogsSignalFull(worker, output);
    } else {
        emit accountListLogsSignalE(output, error_type, error_str);
        emit accountListLogsSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountListSessions() {
    QString fullPath = QString(_serverConfigs["accountListSessions"][_serverIndices.value("accountListSessions")].URL()+"/account/sessions");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountListSessionsCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountListSessionsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWSessionList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountListSessionsSignal(output);
        emit accountListSessionsSignalFull(worker, output);
    } else {
        emit accountListSessionsSignalE(output, error_type, error_str);
        emit accountListSessionsSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdateEmail(const ::OpenAPI::OptionalParam<AWAccountUpdateEmailRequest> &aw_account_update_email_request) {
    QString fullPath = QString(_serverConfigs["accountUpdateEmail"][_serverIndices.value("accountUpdateEmail")].URL()+"/account/email");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");

    if (aw_account_update_email_request.hasValue()){

        
        QByteArray output = aw_account_update_email_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdateEmailCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdateEmailCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdateEmailSignal(output);
        emit accountUpdateEmailSignalFull(worker, output);
    } else {
        emit accountUpdateEmailSignalE(output, error_type, error_str);
        emit accountUpdateEmailSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdateMagicURLSession(const ::OpenAPI::OptionalParam<AWAccountUpdateMagicURLSessionRequest> &aw_account_update_magic_url_session_request) {
    QString fullPath = QString(_serverConfigs["accountUpdateMagicURLSession"][_serverIndices.value("accountUpdateMagicURLSession")].URL()+"/account/sessions/magic-url");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PUT");

    if (aw_account_update_magic_url_session_request.hasValue()){

        
        QByteArray output = aw_account_update_magic_url_session_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdateMagicURLSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdateMagicURLSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWSession output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdateMagicURLSessionSignal(output);
        emit accountUpdateMagicURLSessionSignalFull(worker, output);
    } else {
        emit accountUpdateMagicURLSessionSignalE(output, error_type, error_str);
        emit accountUpdateMagicURLSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdateName(const ::OpenAPI::OptionalParam<AWAccountUpdateNameRequest> &aw_account_update_name_request) {
    QString fullPath = QString(_serverConfigs["accountUpdateName"][_serverIndices.value("accountUpdateName")].URL()+"/account/name");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");

    if (aw_account_update_name_request.hasValue()){

        
        QByteArray output = aw_account_update_name_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdateNameCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdateNameCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdateNameSignal(output);
        emit accountUpdateNameSignalFull(worker, output);
    } else {
        emit accountUpdateNameSignalE(output, error_type, error_str);
        emit accountUpdateNameSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdatePassword(const ::OpenAPI::OptionalParam<AWAccountUpdatePasswordRequest> &aw_account_update_password_request) {
    QString fullPath = QString(_serverConfigs["accountUpdatePassword"][_serverIndices.value("accountUpdatePassword")].URL()+"/account/password");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");

    if (aw_account_update_password_request.hasValue()){

        
        QByteArray output = aw_account_update_password_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdatePasswordCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdatePasswordCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdatePasswordSignal(output);
        emit accountUpdatePasswordSignalFull(worker, output);
    } else {
        emit accountUpdatePasswordSignalE(output, error_type, error_str);
        emit accountUpdatePasswordSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdatePhone(const ::OpenAPI::OptionalParam<AWAccountUpdatePhoneRequest> &aw_account_update_phone_request) {
    QString fullPath = QString(_serverConfigs["accountUpdatePhone"][_serverIndices.value("accountUpdatePhone")].URL()+"/account/phone");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");

    if (aw_account_update_phone_request.hasValue()){

        
        QByteArray output = aw_account_update_phone_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdatePhoneCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdatePhoneCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdatePhoneSignal(output);
        emit accountUpdatePhoneSignalFull(worker, output);
    } else {
        emit accountUpdatePhoneSignalE(output, error_type, error_str);
        emit accountUpdatePhoneSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdatePhoneSession(const ::OpenAPI::OptionalParam<AWAccountUpdatePhoneSessionRequest> &aw_account_update_phone_session_request) {
    QString fullPath = QString(_serverConfigs["accountUpdatePhoneSession"][_serverIndices.value("accountUpdatePhoneSession")].URL()+"/account/sessions/phone");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PUT");

    if (aw_account_update_phone_session_request.hasValue()){

        
        QByteArray output = aw_account_update_phone_session_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdatePhoneSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdatePhoneSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWSession output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdatePhoneSessionSignal(output);
        emit accountUpdatePhoneSessionSignalFull(worker, output);
    } else {
        emit accountUpdatePhoneSessionSignalE(output, error_type, error_str);
        emit accountUpdatePhoneSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdatePhoneVerification(const ::OpenAPI::OptionalParam<AWAccountUpdatePhoneVerificationRequest> &aw_account_update_phone_verification_request) {
    QString fullPath = QString(_serverConfigs["accountUpdatePhoneVerification"][_serverIndices.value("accountUpdatePhoneVerification")].URL()+"/account/verification/phone");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PUT");

    if (aw_account_update_phone_verification_request.hasValue()){

        
        QByteArray output = aw_account_update_phone_verification_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdatePhoneVerificationCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdatePhoneVerificationCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdatePhoneVerificationSignal(output);
        emit accountUpdatePhoneVerificationSignalFull(worker, output);
    } else {
        emit accountUpdatePhoneVerificationSignalE(output, error_type, error_str);
        emit accountUpdatePhoneVerificationSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdatePrefs(const ::OpenAPI::OptionalParam<AWAccountUpdatePrefsRequest> &aw_account_update_prefs_request) {
    QString fullPath = QString(_serverConfigs["accountUpdatePrefs"][_serverIndices.value("accountUpdatePrefs")].URL()+"/account/prefs");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");

    if (aw_account_update_prefs_request.hasValue()){

        
        QByteArray output = aw_account_update_prefs_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdatePrefsCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdatePrefsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdatePrefsSignal(output);
        emit accountUpdatePrefsSignalFull(worker, output);
    } else {
        emit accountUpdatePrefsSignalE(output, error_type, error_str);
        emit accountUpdatePrefsSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdateRecovery(const ::OpenAPI::OptionalParam<AWAccountUpdateRecoveryRequest> &aw_account_update_recovery_request) {
    QString fullPath = QString(_serverConfigs["accountUpdateRecovery"][_serverIndices.value("accountUpdateRecovery")].URL()+"/account/recovery");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PUT");

    if (aw_account_update_recovery_request.hasValue()){

        
        QByteArray output = aw_account_update_recovery_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdateRecoveryCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdateRecoveryCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdateRecoverySignal(output);
        emit accountUpdateRecoverySignalFull(worker, output);
    } else {
        emit accountUpdateRecoverySignalE(output, error_type, error_str);
        emit accountUpdateRecoverySignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdateSession(const QString &session_id) {
    QString fullPath = QString(_serverConfigs["accountUpdateSession"][_serverIndices.value("accountUpdateSession")].URL()+"/account/sessions/{sessionId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionId"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdateSessionCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdateSessionCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWSession output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdateSessionSignal(output);
        emit accountUpdateSessionSignalFull(worker, output);
    } else {
        emit accountUpdateSessionSignalE(output, error_type, error_str);
        emit accountUpdateSessionSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdateStatus() {
    QString fullPath = QString(_serverConfigs["accountUpdateStatus"][_serverIndices.value("accountUpdateStatus")].URL()+"/account/status");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdateStatusCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdateStatusCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdateStatusSignal(output);
        emit accountUpdateStatusSignalFull(worker, output);
    } else {
        emit accountUpdateStatusSignalE(output, error_type, error_str);
        emit accountUpdateStatusSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::accountUpdateVerification(const ::OpenAPI::OptionalParam<AWAccountUpdateVerificationRequest> &aw_account_update_verification_request) {
    QString fullPath = QString(_serverConfigs["accountUpdateVerification"][_serverIndices.value("accountUpdateVerification")].URL()+"/account/verification");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PUT");

    if (aw_account_update_verification_request.hasValue()){

        
        QByteArray output = aw_account_update_verification_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWAccountApi::accountUpdateVerificationCallback);
    connect(this, &AWAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWAccountApi::accountUpdateVerificationCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit accountUpdateVerificationSignal(output);
        emit accountUpdateVerificationSignalFull(worker, output);
    } else {
        emit accountUpdateVerificationSignalE(output, error_type, error_str);
        emit accountUpdateVerificationSignalEFull(worker, error_type, error_str);
    }
}

void AWAccountApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
