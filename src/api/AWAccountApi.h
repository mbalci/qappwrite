/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef AWACCOUNTAPI_H
#define AWACCOUNTAPI_H

#include "src/AWHelpers.h"
#include "src/AWHttpRequest.h"
#include "src/AWServerConfiguration.h"
#include "src/AWOauth.h"

#include "src/model/AWAccountCreateEmailSessionRequest.h"
#include "src/model/AWAccountCreateMagicURLSessionRequest.h"
#include "src/model/AWAccountCreatePhoneSessionRequest.h"
#include "src/model/AWAccountCreateRecoveryRequest.h"
#include "src/model/AWAccountCreateRequest.h"
#include "src/model/AWAccountCreateVerificationRequest.h"
#include "src/model/AWAccountUpdateEmailRequest.h"
#include "src/model/AWAccountUpdateMagicURLSessionRequest.h"
#include "src/model/AWAccountUpdateNameRequest.h"
#include "src/model/AWAccountUpdatePasswordRequest.h"
#include "src/model/AWAccountUpdatePhoneRequest.h"
#include "src/model/AWAccountUpdatePhoneSessionRequest.h"
#include "src/model/AWAccountUpdatePhoneVerificationRequest.h"
#include "src/model/AWAccountUpdatePrefsRequest.h"
#include "src/model/AWAccountUpdateRecoveryRequest.h"
#include "src/model/AWAccountUpdateVerificationRequest.h"
#include "src/model/AWJwt.h"
#include "src/model/AWLogList.h"
#include "src/model/AWSession.h"
#include "src/model/AWSessionList.h"
#include "src/model/AWToken.h"
#include "src/model/AWUser.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

#include "src/AWGlobalExport.h"

namespace OpenAPI {

class APPWRITE_EXPORT AWAccountApi : public QObject {
    Q_OBJECT

public:
    AWAccountApi(const int timeOut = 0);
    ~AWAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables = QMap<QString, AWServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  aw_account_create_request AWAccountCreateRequest [optional]
    */
    void accountCreate(const ::OpenAPI::OptionalParam<AWAccountCreateRequest> &aw_account_create_request = ::OpenAPI::OptionalParam<AWAccountCreateRequest>());


    void accountCreateAnonymousSession();

    /**
    * @param[in]  aw_account_create_email_session_request AWAccountCreateEmailSessionRequest [optional]
    */
    void accountCreateEmailSession(const ::OpenAPI::OptionalParam<AWAccountCreateEmailSessionRequest> &aw_account_create_email_session_request = ::OpenAPI::OptionalParam<AWAccountCreateEmailSessionRequest>());


    void accountCreateJWT();

    /**
    * @param[in]  aw_account_create_magic_url_session_request AWAccountCreateMagicURLSessionRequest [optional]
    */
    void accountCreateMagicURLSession(const ::OpenAPI::OptionalParam<AWAccountCreateMagicURLSessionRequest> &aw_account_create_magic_url_session_request = ::OpenAPI::OptionalParam<AWAccountCreateMagicURLSessionRequest>());

    /**
    * @param[in]  provider QString [required]
    * @param[in]  success QString [optional]
    * @param[in]  failure QString [optional]
    * @param[in]  scopes QList<QString> [optional]
    */
    void accountCreateOAuth2Session(const QString &provider, const ::OpenAPI::OptionalParam<QString> &success = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &failure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &scopes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  aw_account_create_phone_session_request AWAccountCreatePhoneSessionRequest [optional]
    */
    void accountCreatePhoneSession(const ::OpenAPI::OptionalParam<AWAccountCreatePhoneSessionRequest> &aw_account_create_phone_session_request = ::OpenAPI::OptionalParam<AWAccountCreatePhoneSessionRequest>());


    void accountCreatePhoneVerification();

    /**
    * @param[in]  aw_account_create_recovery_request AWAccountCreateRecoveryRequest [optional]
    */
    void accountCreateRecovery(const ::OpenAPI::OptionalParam<AWAccountCreateRecoveryRequest> &aw_account_create_recovery_request = ::OpenAPI::OptionalParam<AWAccountCreateRecoveryRequest>());

    /**
    * @param[in]  aw_account_create_verification_request AWAccountCreateVerificationRequest [optional]
    */
    void accountCreateVerification(const ::OpenAPI::OptionalParam<AWAccountCreateVerificationRequest> &aw_account_create_verification_request = ::OpenAPI::OptionalParam<AWAccountCreateVerificationRequest>());

    /**
    * @param[in]  session_id QString [required]
    */
    void accountDeleteSession(const QString &session_id);


    void accountDeleteSessions();


    void accountGet();


    void accountGetPrefs();

    /**
    * @param[in]  session_id QString [required]
    */
    void accountGetSession(const QString &session_id);

    /**
    * @param[in]  queries QList<QString> [optional]
    */
    void accountListLogs(const ::OpenAPI::OptionalParam<QList<QString>> &queries = ::OpenAPI::OptionalParam<QList<QString>>());


    void accountListSessions();

    /**
    * @param[in]  aw_account_update_email_request AWAccountUpdateEmailRequest [optional]
    */
    void accountUpdateEmail(const ::OpenAPI::OptionalParam<AWAccountUpdateEmailRequest> &aw_account_update_email_request = ::OpenAPI::OptionalParam<AWAccountUpdateEmailRequest>());

    /**
    * @param[in]  aw_account_update_magic_url_session_request AWAccountUpdateMagicURLSessionRequest [optional]
    */
    void accountUpdateMagicURLSession(const ::OpenAPI::OptionalParam<AWAccountUpdateMagicURLSessionRequest> &aw_account_update_magic_url_session_request = ::OpenAPI::OptionalParam<AWAccountUpdateMagicURLSessionRequest>());

    /**
    * @param[in]  aw_account_update_name_request AWAccountUpdateNameRequest [optional]
    */
    void accountUpdateName(const ::OpenAPI::OptionalParam<AWAccountUpdateNameRequest> &aw_account_update_name_request = ::OpenAPI::OptionalParam<AWAccountUpdateNameRequest>());

    /**
    * @param[in]  aw_account_update_password_request AWAccountUpdatePasswordRequest [optional]
    */
    void accountUpdatePassword(const ::OpenAPI::OptionalParam<AWAccountUpdatePasswordRequest> &aw_account_update_password_request = ::OpenAPI::OptionalParam<AWAccountUpdatePasswordRequest>());

    /**
    * @param[in]  aw_account_update_phone_request AWAccountUpdatePhoneRequest [optional]
    */
    void accountUpdatePhone(const ::OpenAPI::OptionalParam<AWAccountUpdatePhoneRequest> &aw_account_update_phone_request = ::OpenAPI::OptionalParam<AWAccountUpdatePhoneRequest>());

    /**
    * @param[in]  aw_account_update_phone_session_request AWAccountUpdatePhoneSessionRequest [optional]
    */
    void accountUpdatePhoneSession(const ::OpenAPI::OptionalParam<AWAccountUpdatePhoneSessionRequest> &aw_account_update_phone_session_request = ::OpenAPI::OptionalParam<AWAccountUpdatePhoneSessionRequest>());

    /**
    * @param[in]  aw_account_update_phone_verification_request AWAccountUpdatePhoneVerificationRequest [optional]
    */
    void accountUpdatePhoneVerification(const ::OpenAPI::OptionalParam<AWAccountUpdatePhoneVerificationRequest> &aw_account_update_phone_verification_request = ::OpenAPI::OptionalParam<AWAccountUpdatePhoneVerificationRequest>());

    /**
    * @param[in]  aw_account_update_prefs_request AWAccountUpdatePrefsRequest [optional]
    */
    void accountUpdatePrefs(const ::OpenAPI::OptionalParam<AWAccountUpdatePrefsRequest> &aw_account_update_prefs_request = ::OpenAPI::OptionalParam<AWAccountUpdatePrefsRequest>());

    /**
    * @param[in]  aw_account_update_recovery_request AWAccountUpdateRecoveryRequest [optional]
    */
    void accountUpdateRecovery(const ::OpenAPI::OptionalParam<AWAccountUpdateRecoveryRequest> &aw_account_update_recovery_request = ::OpenAPI::OptionalParam<AWAccountUpdateRecoveryRequest>());

    /**
    * @param[in]  session_id QString [required]
    */
    void accountUpdateSession(const QString &session_id);


    void accountUpdateStatus();

    /**
    * @param[in]  aw_account_update_verification_request AWAccountUpdateVerificationRequest [optional]
    */
    void accountUpdateVerification(const ::OpenAPI::OptionalParam<AWAccountUpdateVerificationRequest> &aw_account_update_verification_request = ::OpenAPI::OptionalParam<AWAccountUpdateVerificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<AWServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    AWHttpRequestInput _latestInput;
    AWHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountCreateCallback(AWHttpRequestWorker *worker);
    void accountCreateAnonymousSessionCallback(AWHttpRequestWorker *worker);
    void accountCreateEmailSessionCallback(AWHttpRequestWorker *worker);
    void accountCreateJWTCallback(AWHttpRequestWorker *worker);
    void accountCreateMagicURLSessionCallback(AWHttpRequestWorker *worker);
    void accountCreateOAuth2SessionCallback(AWHttpRequestWorker *worker);
    void accountCreatePhoneSessionCallback(AWHttpRequestWorker *worker);
    void accountCreatePhoneVerificationCallback(AWHttpRequestWorker *worker);
    void accountCreateRecoveryCallback(AWHttpRequestWorker *worker);
    void accountCreateVerificationCallback(AWHttpRequestWorker *worker);
    void accountDeleteSessionCallback(AWHttpRequestWorker *worker);
    void accountDeleteSessionsCallback(AWHttpRequestWorker *worker);
    void accountGetCallback(AWHttpRequestWorker *worker);
    void accountGetPrefsCallback(AWHttpRequestWorker *worker);
    void accountGetSessionCallback(AWHttpRequestWorker *worker);
    void accountListLogsCallback(AWHttpRequestWorker *worker);
    void accountListSessionsCallback(AWHttpRequestWorker *worker);
    void accountUpdateEmailCallback(AWHttpRequestWorker *worker);
    void accountUpdateMagicURLSessionCallback(AWHttpRequestWorker *worker);
    void accountUpdateNameCallback(AWHttpRequestWorker *worker);
    void accountUpdatePasswordCallback(AWHttpRequestWorker *worker);
    void accountUpdatePhoneCallback(AWHttpRequestWorker *worker);
    void accountUpdatePhoneSessionCallback(AWHttpRequestWorker *worker);
    void accountUpdatePhoneVerificationCallback(AWHttpRequestWorker *worker);
    void accountUpdatePrefsCallback(AWHttpRequestWorker *worker);
    void accountUpdateRecoveryCallback(AWHttpRequestWorker *worker);
    void accountUpdateSessionCallback(AWHttpRequestWorker *worker);
    void accountUpdateStatusCallback(AWHttpRequestWorker *worker);
    void accountUpdateVerificationCallback(AWHttpRequestWorker *worker);

signals:

    void accountCreateSignal(AWUser summary);
    void accountCreateAnonymousSessionSignal(AWSession summary);
    void accountCreateEmailSessionSignal(AWSession summary);
    void accountCreateJWTSignal(AWJwt summary);
    void accountCreateMagicURLSessionSignal(AWToken summary);
    void accountCreateOAuth2SessionSignal();
    void accountCreatePhoneSessionSignal(AWToken summary);
    void accountCreatePhoneVerificationSignal(AWToken summary);
    void accountCreateRecoverySignal(AWToken summary);
    void accountCreateVerificationSignal(AWToken summary);
    void accountDeleteSessionSignal();
    void accountDeleteSessionsSignal();
    void accountGetSignal(AWUser summary);
    void accountGetPrefsSignal(QMap<QString, QJsonValue> summary);
    void accountGetSessionSignal(AWSession summary);
    void accountListLogsSignal(AWLogList summary);
    void accountListSessionsSignal(AWSessionList summary);
    void accountUpdateEmailSignal(AWUser summary);
    void accountUpdateMagicURLSessionSignal(AWSession summary);
    void accountUpdateNameSignal(AWUser summary);
    void accountUpdatePasswordSignal(AWUser summary);
    void accountUpdatePhoneSignal(AWUser summary);
    void accountUpdatePhoneSessionSignal(AWSession summary);
    void accountUpdatePhoneVerificationSignal(AWToken summary);
    void accountUpdatePrefsSignal(AWUser summary);
    void accountUpdateRecoverySignal(AWToken summary);
    void accountUpdateSessionSignal(AWSession summary);
    void accountUpdateStatusSignal(AWUser summary);
    void accountUpdateVerificationSignal(AWToken summary);

    void accountCreateSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountCreateAnonymousSessionSignalFull(AWHttpRequestWorker *worker, AWSession summary);
    void accountCreateEmailSessionSignalFull(AWHttpRequestWorker *worker, AWSession summary);
    void accountCreateJWTSignalFull(AWHttpRequestWorker *worker, AWJwt summary);
    void accountCreateMagicURLSessionSignalFull(AWHttpRequestWorker *worker, AWToken summary);
    void accountCreateOAuth2SessionSignalFull(AWHttpRequestWorker *worker);
    void accountCreatePhoneSessionSignalFull(AWHttpRequestWorker *worker, AWToken summary);
    void accountCreatePhoneVerificationSignalFull(AWHttpRequestWorker *worker, AWToken summary);
    void accountCreateRecoverySignalFull(AWHttpRequestWorker *worker, AWToken summary);
    void accountCreateVerificationSignalFull(AWHttpRequestWorker *worker, AWToken summary);
    void accountDeleteSessionSignalFull(AWHttpRequestWorker *worker);
    void accountDeleteSessionsSignalFull(AWHttpRequestWorker *worker);
    void accountGetSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountGetPrefsSignalFull(AWHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void accountGetSessionSignalFull(AWHttpRequestWorker *worker, AWSession summary);
    void accountListLogsSignalFull(AWHttpRequestWorker *worker, AWLogList summary);
    void accountListSessionsSignalFull(AWHttpRequestWorker *worker, AWSessionList summary);
    void accountUpdateEmailSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountUpdateMagicURLSessionSignalFull(AWHttpRequestWorker *worker, AWSession summary);
    void accountUpdateNameSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountUpdatePasswordSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountUpdatePhoneSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountUpdatePhoneSessionSignalFull(AWHttpRequestWorker *worker, AWSession summary);
    void accountUpdatePhoneVerificationSignalFull(AWHttpRequestWorker *worker, AWToken summary);
    void accountUpdatePrefsSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountUpdateRecoverySignalFull(AWHttpRequestWorker *worker, AWToken summary);
    void accountUpdateSessionSignalFull(AWHttpRequestWorker *worker, AWSession summary);
    void accountUpdateStatusSignalFull(AWHttpRequestWorker *worker, AWUser summary);
    void accountUpdateVerificationSignalFull(AWHttpRequestWorker *worker, AWToken summary);

    void accountCreateSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateAnonymousSessionSignalE(AWSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateEmailSessionSignalE(AWSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateJWTSignalE(AWJwt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateMagicURLSessionSignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateOAuth2SessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreatePhoneSessionSignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreatePhoneVerificationSignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateRecoverySignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateVerificationSignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPrefsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSessionSignalE(AWSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListLogsSignalE(AWLogList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListSessionsSignalE(AWSessionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateEmailSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateMagicURLSessionSignalE(AWSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateNameSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePasswordSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePhoneSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePhoneSessionSignalE(AWSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePhoneVerificationSignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePrefsSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateRecoverySignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateSessionSignalE(AWSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateStatusSignalE(AWUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateVerificationSignalE(AWToken summary, QNetworkReply::NetworkError error_type, QString error_str);

    void accountCreateSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateAnonymousSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateEmailSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateJWTSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateMagicURLSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateOAuth2SessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreatePhoneSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreatePhoneVerificationSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateRecoverySignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateVerificationSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPrefsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListLogsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListSessionsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateEmailSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateMagicURLSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateNameSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePasswordSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePhoneSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePhoneSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePhoneVerificationSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePrefsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateRecoverySignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateSessionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateStatusSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateVerificationSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif // AWACCOUNTAPI_H
