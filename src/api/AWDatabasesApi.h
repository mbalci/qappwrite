/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef AWDATABASESAPI_H
#define AWDATABASESAPI_H

#include "src/AWHelpers.h"
#include "src/AWHttpRequest.h"
#include "src/AWServerConfiguration.h"
#include "src/AWOauth.h"

#include "src/model/AWDatabasesCreateDocumentRequest.h"
#include "src/model/AWDatabasesUpdateDocumentRequest.h"
#include "src/model/AWDocument.h"
#include "src/model/AWDocumentList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

#include "src/AWGlobalExport.h"

namespace OpenAPI {

class APPWRITE_EXPORT AWDatabasesApi : public QObject {
    Q_OBJECT

public:
    AWDatabasesApi(const int timeOut = 0);
    ~AWDatabasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables = QMap<QString, AWServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  database_id QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  aw_databases_create_document_request AWDatabasesCreateDocumentRequest [optional]
    */
    void databasesCreateDocument(const QString &database_id, const QString &collection_id, const ::OpenAPI::OptionalParam<AWDatabasesCreateDocumentRequest> &aw_databases_create_document_request = ::OpenAPI::OptionalParam<AWDatabasesCreateDocumentRequest>());

    /**
    * @param[in]  database_id QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  document_id QString [required]
    */
    void databasesDeleteDocument(const QString &database_id, const QString &collection_id, const QString &document_id);

    /**
    * @param[in]  database_id QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  queries QList<QString> [optional]
    */
    void databasesGetDocument(const QString &database_id, const QString &collection_id, const QString &document_id, const ::OpenAPI::OptionalParam<QList<QString>> &queries = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  database_id QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  queries QList<QString> [optional]
    */
    void databasesListDocuments(const QString &database_id, const QString &collection_id, const ::OpenAPI::OptionalParam<QList<QString>> &queries = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  database_id QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  aw_databases_update_document_request AWDatabasesUpdateDocumentRequest [optional]
    */
    void databasesUpdateDocument(const QString &database_id, const QString &collection_id, const QString &document_id, const ::OpenAPI::OptionalParam<AWDatabasesUpdateDocumentRequest> &aw_databases_update_document_request = ::OpenAPI::OptionalParam<AWDatabasesUpdateDocumentRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<AWServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    AWHttpRequestInput _latestInput;
    AWHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databasesCreateDocumentCallback(AWHttpRequestWorker *worker);
    void databasesDeleteDocumentCallback(AWHttpRequestWorker *worker);
    void databasesGetDocumentCallback(AWHttpRequestWorker *worker);
    void databasesListDocumentsCallback(AWHttpRequestWorker *worker);
    void databasesUpdateDocumentCallback(AWHttpRequestWorker *worker);

signals:

    void databasesCreateDocumentSignal(AWDocument summary);
    void databasesDeleteDocumentSignal();
    void databasesGetDocumentSignal(AWDocument summary);
    void databasesListDocumentsSignal(AWDocumentList summary);
    void databasesUpdateDocumentSignal(AWDocument summary);

    void databasesCreateDocumentSignalFull(AWHttpRequestWorker *worker, AWDocument summary);
    void databasesDeleteDocumentSignalFull(AWHttpRequestWorker *worker);
    void databasesGetDocumentSignalFull(AWHttpRequestWorker *worker, AWDocument summary);
    void databasesListDocumentsSignalFull(AWHttpRequestWorker *worker, AWDocumentList summary);
    void databasesUpdateDocumentSignalFull(AWHttpRequestWorker *worker, AWDocument summary);

    void databasesCreateDocumentSignalE(AWDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetDocumentSignalE(AWDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListDocumentsSignalE(AWDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpdateDocumentSignalE(AWDocument summary, QNetworkReply::NetworkError error_type, QString error_str);

    void databasesCreateDocumentSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteDocumentSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetDocumentSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListDocumentsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpdateDocumentSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif // AWDATABASESAPI_H
