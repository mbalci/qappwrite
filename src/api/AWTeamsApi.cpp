/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "AWTeamsApi.h"
#include "src/AWServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

AWTeamsApi::AWTeamsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

AWTeamsApi::~AWTeamsApi() {
}

void AWTeamsApi::initializeServerConfigs() {
    //Default server
    QList<AWServerConfiguration> defaultConf = QList<AWServerConfiguration>();
    //varying endpoint server
    defaultConf.append(AWServerConfiguration(
    QUrl("https://HOSTNAME/v1"),
    "No description provided",
    QMap<QString, AWServerVariable>()));
    _serverConfigs.insert("teamsCreate", defaultConf);
    _serverIndices.insert("teamsCreate", 0);
    _serverConfigs.insert("teamsCreateMembership", defaultConf);
    _serverIndices.insert("teamsCreateMembership", 0);
    _serverConfigs.insert("teamsDelete", defaultConf);
    _serverIndices.insert("teamsDelete", 0);
    _serverConfigs.insert("teamsDeleteMembership", defaultConf);
    _serverIndices.insert("teamsDeleteMembership", 0);
    _serverConfigs.insert("teamsGet", defaultConf);
    _serverIndices.insert("teamsGet", 0);
    _serverConfigs.insert("teamsGetMembership", defaultConf);
    _serverIndices.insert("teamsGetMembership", 0);
    _serverConfigs.insert("teamsGetPrefs", defaultConf);
    _serverIndices.insert("teamsGetPrefs", 0);
    _serverConfigs.insert("teamsList", defaultConf);
    _serverIndices.insert("teamsList", 0);
    _serverConfigs.insert("teamsListMemberships", defaultConf);
    _serverIndices.insert("teamsListMemberships", 0);
    _serverConfigs.insert("teamsUpdateMembershipRoles", defaultConf);
    _serverIndices.insert("teamsUpdateMembershipRoles", 0);
    _serverConfigs.insert("teamsUpdateMembershipStatus", defaultConf);
    _serverIndices.insert("teamsUpdateMembershipStatus", 0);
    _serverConfigs.insert("teamsUpdateName", defaultConf);
    _serverIndices.insert("teamsUpdateName", 0);
    _serverConfigs.insert("teamsUpdatePrefs", defaultConf);
    _serverIndices.insert("teamsUpdatePrefs", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int AWTeamsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void AWTeamsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void AWTeamsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void AWTeamsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void AWTeamsApi::setUsername(const QString &username) {
    _username = username;
}

void AWTeamsApi::setPassword(const QString &password) {
    _password = password;
}


void AWTeamsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void AWTeamsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void AWTeamsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int AWTeamsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, AWServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(AWServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void AWTeamsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, AWServerVariable> &variables) {
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
#else
    for (auto &e : _serverIndices.keys()) {
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
#endif
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void AWTeamsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, AWServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void AWTeamsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void AWTeamsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void AWTeamsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void AWTeamsApi::abortRequests() {
    emit abortRequestsSignal();
}

QString AWTeamsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString AWTeamsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString AWTeamsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void AWTeamsApi::teamsCreate(const ::OpenAPI::OptionalParam<AWTeamsCreateRequest> &aw_teams_create_request) {
    QString fullPath = QString(_serverConfigs["teamsCreate"][_serverIndices.value("teamsCreate")].URL()+"/teams");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_teams_create_request.hasValue()){

        
        QByteArray output = aw_teams_create_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsCreateCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsCreateCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWTeam output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsCreateSignal(output);
        emit teamsCreateSignalFull(worker, output);
    } else {
        emit teamsCreateSignalE(output, error_type, error_str);
        emit teamsCreateSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsCreateMembership(const QString &team_id, const ::OpenAPI::OptionalParam<AWTeamsCreateMembershipRequest> &aw_teams_create_membership_request) {
    QString fullPath = QString(_serverConfigs["teamsCreateMembership"][_serverIndices.value("teamsCreateMembership")].URL()+"/teams/{teamId}/memberships");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "POST");

    if (aw_teams_create_membership_request.hasValue()){

        
        QByteArray output = aw_teams_create_membership_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsCreateMembershipCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsCreateMembershipCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWMembership output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsCreateMembershipSignal(output);
        emit teamsCreateMembershipSignalFull(worker, output);
    } else {
        emit teamsCreateMembershipSignalE(output, error_type, error_str);
        emit teamsCreateMembershipSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsDelete(const QString &team_id) {
    QString fullPath = QString(_serverConfigs["teamsDelete"][_serverIndices.value("teamsDelete")].URL()+"/teams/{teamId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "DELETE");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsDeleteCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsDeleteCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsDeleteSignal();
        emit teamsDeleteSignalFull(worker);
    } else {
        emit teamsDeleteSignalE(error_type, error_str);
        emit teamsDeleteSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsDeleteMembership(const QString &team_id, const QString &membership_id) {
    QString fullPath = QString(_serverConfigs["teamsDeleteMembership"][_serverIndices.value("teamsDeleteMembership")].URL()+"/teams/{teamId}/memberships/{membershipId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "DELETE");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsDeleteMembershipCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsDeleteMembershipCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsDeleteMembershipSignal();
        emit teamsDeleteMembershipSignalFull(worker);
    } else {
        emit teamsDeleteMembershipSignalE(error_type, error_str);
        emit teamsDeleteMembershipSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsGet(const QString &team_id) {
    QString fullPath = QString(_serverConfigs["teamsGet"][_serverIndices.value("teamsGet")].URL()+"/teams/{teamId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsGetCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsGetCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWTeam output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsGetSignal(output);
        emit teamsGetSignalFull(worker, output);
    } else {
        emit teamsGetSignalE(output, error_type, error_str);
        emit teamsGetSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsGetMembership(const QString &team_id, const QString &membership_id) {
    QString fullPath = QString(_serverConfigs["teamsGetMembership"][_serverIndices.value("teamsGetMembership")].URL()+"/teams/{teamId}/memberships/{membershipId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsGetMembershipCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsGetMembershipCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWMembership output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsGetMembershipSignal(output);
        emit teamsGetMembershipSignalFull(worker, output);
    } else {
        emit teamsGetMembershipSignalE(output, error_type, error_str);
        emit teamsGetMembershipSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsGetPrefs(const QString &team_id) {
    QString fullPath = QString(_serverConfigs["teamsGetPrefs"][_serverIndices.value("teamsGetPrefs")].URL()+"/teams/{teamId}/prefs");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsGetPrefsCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsGetPrefsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QJsonValue> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QJsonValue val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsGetPrefsSignal(output);
        emit teamsGetPrefsSignalFull(worker, output);
    } else {
        emit teamsGetPrefsSignalE(output, error_type, error_str);
        emit teamsGetPrefsSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsList(const ::OpenAPI::OptionalParam<QList<QString>> &queries, const ::OpenAPI::OptionalParam<QString> &search) {
    QString fullPath = QString(_serverConfigs["teamsList"][_serverIndices.value("teamsList")].URL()+"/teams");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (queries.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queries", true);
        if (queries.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : queries.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("queries=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (search.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(search.value())));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsListCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsListCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWTeamList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsListSignal(output);
        emit teamsListSignalFull(worker, output);
    } else {
        emit teamsListSignalE(output, error_type, error_str);
        emit teamsListSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsListMemberships(const QString &team_id, const ::OpenAPI::OptionalParam<QList<QString>> &queries, const ::OpenAPI::OptionalParam<QString> &search) {
    QString fullPath = QString(_serverConfigs["teamsListMemberships"][_serverIndices.value("teamsListMemberships")].URL()+"/teams/{teamId}/memberships");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (queries.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queries", true);
        if (queries.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : queries.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("queries=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("queries").append(querySuffix);
                qint32 count = 0;
                for (QString t : queries.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (search.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(search.value())));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsListMembershipsCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsListMembershipsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWMembershipList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsListMembershipsSignal(output);
        emit teamsListMembershipsSignalFull(worker, output);
    } else {
        emit teamsListMembershipsSignalE(output, error_type, error_str);
        emit teamsListMembershipsSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsUpdateMembershipRoles(const QString &team_id, const QString &membership_id, const ::OpenAPI::OptionalParam<AWTeamsUpdateMembershipRolesRequest> &aw_teams_update_membership_roles_request) {
    QString fullPath = QString(_serverConfigs["teamsUpdateMembershipRoles"][_serverIndices.value("teamsUpdateMembershipRoles")].URL()+"/teams/{teamId}/memberships/{membershipId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");

    if (aw_teams_update_membership_roles_request.hasValue()){

        
        QByteArray output = aw_teams_update_membership_roles_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsUpdateMembershipRolesCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsUpdateMembershipRolesCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWMembership output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsUpdateMembershipRolesSignal(output);
        emit teamsUpdateMembershipRolesSignalFull(worker, output);
    } else {
        emit teamsUpdateMembershipRolesSignalE(output, error_type, error_str);
        emit teamsUpdateMembershipRolesSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsUpdateMembershipStatus(const QString &team_id, const QString &membership_id, const ::OpenAPI::OptionalParam<AWTeamsUpdateMembershipStatusRequest> &aw_teams_update_membership_status_request) {
    QString fullPath = QString(_serverConfigs["teamsUpdateMembershipStatus"][_serverIndices.value("teamsUpdateMembershipStatus")].URL()+"/teams/{teamId}/memberships/{membershipId}/status");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PATCH");

    if (aw_teams_update_membership_status_request.hasValue()){

        
        QByteArray output = aw_teams_update_membership_status_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsUpdateMembershipStatusCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsUpdateMembershipStatusCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWMembership output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsUpdateMembershipStatusSignal(output);
        emit teamsUpdateMembershipStatusSignalFull(worker, output);
    } else {
        emit teamsUpdateMembershipStatusSignalE(output, error_type, error_str);
        emit teamsUpdateMembershipStatusSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsUpdateName(const QString &team_id, const ::OpenAPI::OptionalParam<AWTeamsUpdateNameRequest> &aw_teams_update_name_request) {
    QString fullPath = QString(_serverConfigs["teamsUpdateName"][_serverIndices.value("teamsUpdateName")].URL()+"/teams/{teamId}");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PUT");

    if (aw_teams_update_name_request.hasValue()){

        
        QByteArray output = aw_teams_update_name_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsUpdateNameCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsUpdateNameCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    AWTeam output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsUpdateNameSignal(output);
        emit teamsUpdateNameSignalFull(worker, output);
    } else {
        emit teamsUpdateNameSignalE(output, error_type, error_str);
        emit teamsUpdateNameSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::teamsUpdatePrefs(const QString &team_id, const ::OpenAPI::OptionalParam<AWTeamsUpdatePrefsRequest> &aw_teams_update_prefs_request) {
    QString fullPath = QString(_serverConfigs["teamsUpdatePrefs"][_serverIndices.value("teamsUpdatePrefs")].URL()+"/teams/{teamId}/prefs");
    
    if (_apiKeys.contains("Project")) {
        addHeaders("Project",_apiKeys.find("Project").value());
    }
    
    if (_apiKeys.contains("JWT")) {
        addHeaders("JWT",_apiKeys.find("JWT").value());
    }
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("teamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamId"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    AWHttpRequestWorker *worker = new AWHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    AWHttpRequestInput input(fullPath, "PUT");

    if (aw_teams_update_prefs_request.hasValue()){

        
        QByteArray output = aw_teams_update_prefs_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &AWHttpRequestWorker::on_execution_finished, this, &AWTeamsApi::teamsUpdatePrefsCallback);
    connect(this, &AWTeamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<AWHttpRequestWorker*>().size() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void AWTeamsApi::teamsUpdatePrefsCallback(AWHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, QJsonValue> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        QJsonValue val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit teamsUpdatePrefsSignal(output);
        emit teamsUpdatePrefsSignalFull(worker, output);
    } else {
        emit teamsUpdatePrefsSignalE(output, error_type, error_str);
        emit teamsUpdatePrefsSignalEFull(worker, error_type, error_str);
    }
}

void AWTeamsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
