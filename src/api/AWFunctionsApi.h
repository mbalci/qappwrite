/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef AWFUNCTIONSAPI_H
#define AWFUNCTIONSAPI_H

#include "src/AWHelpers.h"
#include "src/AWHttpRequest.h"
#include "src/AWServerConfiguration.h"
#include "src/AWOauth.h"

#include "src/model/AWExecution.h"
#include "src/model/AWExecutionList.h"
#include "src/model/AWFunctionsCreateExecutionRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

#include "src/AWGlobalExport.h"

namespace OpenAPI {

class APPWRITE_EXPORT AWFunctionsApi : public QObject {
    Q_OBJECT

public:
    AWFunctionsApi(const int timeOut = 0);
    ~AWFunctionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables = QMap<QString, AWServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  aw_functions_create_execution_request AWFunctionsCreateExecutionRequest [optional]
    */
    void functionsCreateExecution(const QString &function_id, const ::OpenAPI::OptionalParam<AWFunctionsCreateExecutionRequest> &aw_functions_create_execution_request = ::OpenAPI::OptionalParam<AWFunctionsCreateExecutionRequest>());

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    void functionsGetExecution(const QString &function_id, const QString &execution_id);

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  queries QList<QString> [optional]
    * @param[in]  search QString [optional]
    */
    void functionsListExecutions(const QString &function_id, const ::OpenAPI::OptionalParam<QList<QString>> &queries = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<AWServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    AWHttpRequestInput _latestInput;
    AWHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void functionsCreateExecutionCallback(AWHttpRequestWorker *worker);
    void functionsGetExecutionCallback(AWHttpRequestWorker *worker);
    void functionsListExecutionsCallback(AWHttpRequestWorker *worker);

signals:

    void functionsCreateExecutionSignal(AWExecution summary);
    void functionsGetExecutionSignal(AWExecution summary);
    void functionsListExecutionsSignal(AWExecutionList summary);

    void functionsCreateExecutionSignalFull(AWHttpRequestWorker *worker, AWExecution summary);
    void functionsGetExecutionSignalFull(AWHttpRequestWorker *worker, AWExecution summary);
    void functionsListExecutionsSignalFull(AWHttpRequestWorker *worker, AWExecutionList summary);

    void functionsCreateExecutionSignalE(AWExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetExecutionSignalE(AWExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListExecutionsSignalE(AWExecutionList summary, QNetworkReply::NetworkError error_type, QString error_str);

    void functionsCreateExecutionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetExecutionSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListExecutionsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif // AWFUNCTIONSAPI_H
