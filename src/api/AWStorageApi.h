/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef AWSTORAGEAPI_H
#define AWSTORAGEAPI_H

#include "src/AWHelpers.h"
#include "src/AWHttpRequest.h"
#include "src/AWServerConfiguration.h"
#include "src/AWOauth.h"

#include "src/model/AWFileEx.h"
#include "src/model/AWFileList.h"
#include "src/model/AWStorageUpdateFileRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

#include "src/AWGlobalExport.h"

namespace OpenAPI {

class APPWRITE_EXPORT AWStorageApi : public QObject {
    Q_OBJECT

public:
    AWStorageApi(const int timeOut = 0);
    ~AWStorageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables = QMap<QString, AWServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  file QString [required]
    * @param[in]  permissions QList<QString> [optional]
    */
    void storageCreateFile(const QString &bucket_id, const QString &file_id, const QString &file, const ::OpenAPI::OptionalParam<QList<QString>> &permissions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  file_id QString [required]
    */
    void storageDeleteFile(const QString &bucket_id, const QString &file_id);

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  file_id QString [required]
    */
    void storageGetFile(const QString &bucket_id, const QString &file_id);

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  file_id QString [required]
    */
    void storageGetFileDownload(const QString &bucket_id, const QString &file_id);

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  gravity QString [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  border_width qint32 [optional]
    * @param[in]  border_color QString [optional]
    * @param[in]  border_radius qint32 [optional]
    * @param[in]  opacity float [optional]
    * @param[in]  rotation qint32 [optional]
    * @param[in]  background QString [optional]
    * @param[in]  output QString [optional]
    */
    void storageGetFilePreview(const QString &bucket_id, const QString &file_id, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &gravity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &border_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &border_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &border_radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &opacity = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &rotation = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  file_id QString [required]
    */
    void storageGetFileView(const QString &bucket_id, const QString &file_id);

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  queries QList<QString> [optional]
    * @param[in]  search QString [optional]
    */
    void storageListFiles(const QString &bucket_id, const ::OpenAPI::OptionalParam<QList<QString>> &queries = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  aw_storage_update_file_request AWStorageUpdateFileRequest [optional]
    */
    void storageUpdateFile(const QString &bucket_id, const QString &file_id, const ::OpenAPI::OptionalParam<AWStorageUpdateFileRequest> &aw_storage_update_file_request = ::OpenAPI::OptionalParam<AWStorageUpdateFileRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<AWServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    AWHttpRequestInput _latestInput;
    AWHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storageCreateFileCallback(AWHttpRequestWorker *worker);
    void storageDeleteFileCallback(AWHttpRequestWorker *worker);
    void storageGetFileCallback(AWHttpRequestWorker *worker);
    void storageGetFileDownloadCallback(AWHttpRequestWorker *worker);
    void storageGetFilePreviewCallback(AWHttpRequestWorker *worker);
    void storageGetFileViewCallback(AWHttpRequestWorker *worker);
    void storageListFilesCallback(AWHttpRequestWorker *worker);
    void storageUpdateFileCallback(AWHttpRequestWorker *worker);

signals:

    void storageCreateFileSignal(AWFileEx summary);
    void storageDeleteFileSignal();
    void storageGetFileSignal(AWFileEx summary);
    void storageGetFileDownloadSignal();
    void storageGetFilePreviewSignal();
    void storageGetFileViewSignal();
    void storageListFilesSignal(AWFileList summary);
    void storageUpdateFileSignal(AWFileEx summary);

    void storageCreateFileSignalFull(AWHttpRequestWorker *worker, AWFileEx summary);
    void storageDeleteFileSignalFull(AWHttpRequestWorker *worker);
    void storageGetFileSignalFull(AWHttpRequestWorker *worker, AWFileEx summary);
    void storageGetFileDownloadSignalFull(AWHttpRequestWorker *worker);
    void storageGetFilePreviewSignalFull(AWHttpRequestWorker *worker);
    void storageGetFileViewSignalFull(AWHttpRequestWorker *worker);
    void storageListFilesSignalFull(AWHttpRequestWorker *worker, AWFileList summary);
    void storageUpdateFileSignalFull(AWHttpRequestWorker *worker, AWFileEx summary);

    void storageCreateFileSignalE(AWFileEx summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageDeleteFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileSignalE(AWFileEx summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileDownloadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFilePreviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileViewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageListFilesSignalE(AWFileList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageUpdateFileSignalE(AWFileEx summary, QNetworkReply::NetworkError error_type, QString error_str);

    void storageCreateFileSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageDeleteFileSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileDownloadSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFilePreviewSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileViewSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageListFilesSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageUpdateFileSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif // AWSTORAGEAPI_H
