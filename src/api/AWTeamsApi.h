/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef AWTEAMSAPI_H
#define AWTEAMSAPI_H

#include "src/AWHelpers.h"
#include "src/AWHttpRequest.h"
#include "src/AWServerConfiguration.h"
#include "src/AWOauth.h"

#include "src/model/AWMembership.h"
#include "src/model/AWMembershipList.h"
#include "src/model/AWTeam.h"
#include "src/model/AWTeamList.h"
#include "src/model/AWTeamsCreateMembershipRequest.h"
#include "src/model/AWTeamsCreateRequest.h"
#include "src/model/AWTeamsUpdateMembershipRolesRequest.h"
#include "src/model/AWTeamsUpdateMembershipStatusRequest.h"
#include "src/model/AWTeamsUpdateNameRequest.h"
#include "src/model/AWTeamsUpdatePrefsRequest.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

#include "src/AWGlobalExport.h"

namespace OpenAPI {

class APPWRITE_EXPORT AWTeamsApi : public QObject {
    Q_OBJECT

public:
    AWTeamsApi(const int timeOut = 0);
    ~AWTeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables = QMap<QString, AWServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, AWServerVariable> &variables =  QMap<QString, AWServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  aw_teams_create_request AWTeamsCreateRequest [optional]
    */
    void teamsCreate(const ::OpenAPI::OptionalParam<AWTeamsCreateRequest> &aw_teams_create_request = ::OpenAPI::OptionalParam<AWTeamsCreateRequest>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  aw_teams_create_membership_request AWTeamsCreateMembershipRequest [optional]
    */
    void teamsCreateMembership(const QString &team_id, const ::OpenAPI::OptionalParam<AWTeamsCreateMembershipRequest> &aw_teams_create_membership_request = ::OpenAPI::OptionalParam<AWTeamsCreateMembershipRequest>());

    /**
    * @param[in]  team_id QString [required]
    */
    void teamsDelete(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  membership_id QString [required]
    */
    void teamsDeleteMembership(const QString &team_id, const QString &membership_id);

    /**
    * @param[in]  team_id QString [required]
    */
    void teamsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  membership_id QString [required]
    */
    void teamsGetMembership(const QString &team_id, const QString &membership_id);

    /**
    * @param[in]  team_id QString [required]
    */
    void teamsGetPrefs(const QString &team_id);

    /**
    * @param[in]  queries QList<QString> [optional]
    * @param[in]  search QString [optional]
    */
    void teamsList(const ::OpenAPI::OptionalParam<QList<QString>> &queries = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  queries QList<QString> [optional]
    * @param[in]  search QString [optional]
    */
    void teamsListMemberships(const QString &team_id, const ::OpenAPI::OptionalParam<QList<QString>> &queries = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  membership_id QString [required]
    * @param[in]  aw_teams_update_membership_roles_request AWTeamsUpdateMembershipRolesRequest [optional]
    */
    void teamsUpdateMembershipRoles(const QString &team_id, const QString &membership_id, const ::OpenAPI::OptionalParam<AWTeamsUpdateMembershipRolesRequest> &aw_teams_update_membership_roles_request = ::OpenAPI::OptionalParam<AWTeamsUpdateMembershipRolesRequest>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  membership_id QString [required]
    * @param[in]  aw_teams_update_membership_status_request AWTeamsUpdateMembershipStatusRequest [optional]
    */
    void teamsUpdateMembershipStatus(const QString &team_id, const QString &membership_id, const ::OpenAPI::OptionalParam<AWTeamsUpdateMembershipStatusRequest> &aw_teams_update_membership_status_request = ::OpenAPI::OptionalParam<AWTeamsUpdateMembershipStatusRequest>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  aw_teams_update_name_request AWTeamsUpdateNameRequest [optional]
    */
    void teamsUpdateName(const QString &team_id, const ::OpenAPI::OptionalParam<AWTeamsUpdateNameRequest> &aw_teams_update_name_request = ::OpenAPI::OptionalParam<AWTeamsUpdateNameRequest>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  aw_teams_update_prefs_request AWTeamsUpdatePrefsRequest [optional]
    */
    void teamsUpdatePrefs(const QString &team_id, const ::OpenAPI::OptionalParam<AWTeamsUpdatePrefsRequest> &aw_teams_update_prefs_request = ::OpenAPI::OptionalParam<AWTeamsUpdatePrefsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<AWServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    AWHttpRequestInput _latestInput;
    AWHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teamsCreateCallback(AWHttpRequestWorker *worker);
    void teamsCreateMembershipCallback(AWHttpRequestWorker *worker);
    void teamsDeleteCallback(AWHttpRequestWorker *worker);
    void teamsDeleteMembershipCallback(AWHttpRequestWorker *worker);
    void teamsGetCallback(AWHttpRequestWorker *worker);
    void teamsGetMembershipCallback(AWHttpRequestWorker *worker);
    void teamsGetPrefsCallback(AWHttpRequestWorker *worker);
    void teamsListCallback(AWHttpRequestWorker *worker);
    void teamsListMembershipsCallback(AWHttpRequestWorker *worker);
    void teamsUpdateMembershipRolesCallback(AWHttpRequestWorker *worker);
    void teamsUpdateMembershipStatusCallback(AWHttpRequestWorker *worker);
    void teamsUpdateNameCallback(AWHttpRequestWorker *worker);
    void teamsUpdatePrefsCallback(AWHttpRequestWorker *worker);

signals:

    void teamsCreateSignal(AWTeam summary);
    void teamsCreateMembershipSignal(AWMembership summary);
    void teamsDeleteSignal();
    void teamsDeleteMembershipSignal();
    void teamsGetSignal(AWTeam summary);
    void teamsGetMembershipSignal(AWMembership summary);
    void teamsGetPrefsSignal(QMap<QString, QJsonValue> summary);
    void teamsListSignal(AWTeamList summary);
    void teamsListMembershipsSignal(AWMembershipList summary);
    void teamsUpdateMembershipRolesSignal(AWMembership summary);
    void teamsUpdateMembershipStatusSignal(AWMembership summary);
    void teamsUpdateNameSignal(AWTeam summary);
    void teamsUpdatePrefsSignal(QMap<QString, QJsonValue> summary);

    void teamsCreateSignalFull(AWHttpRequestWorker *worker, AWTeam summary);
    void teamsCreateMembershipSignalFull(AWHttpRequestWorker *worker, AWMembership summary);
    void teamsDeleteSignalFull(AWHttpRequestWorker *worker);
    void teamsDeleteMembershipSignalFull(AWHttpRequestWorker *worker);
    void teamsGetSignalFull(AWHttpRequestWorker *worker, AWTeam summary);
    void teamsGetMembershipSignalFull(AWHttpRequestWorker *worker, AWMembership summary);
    void teamsGetPrefsSignalFull(AWHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void teamsListSignalFull(AWHttpRequestWorker *worker, AWTeamList summary);
    void teamsListMembershipsSignalFull(AWHttpRequestWorker *worker, AWMembershipList summary);
    void teamsUpdateMembershipRolesSignalFull(AWHttpRequestWorker *worker, AWMembership summary);
    void teamsUpdateMembershipStatusSignalFull(AWHttpRequestWorker *worker, AWMembership summary);
    void teamsUpdateNameSignalFull(AWHttpRequestWorker *worker, AWTeam summary);
    void teamsUpdatePrefsSignalFull(AWHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);

    void teamsCreateSignalE(AWTeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateMembershipSignalE(AWMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteMembershipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetSignalE(AWTeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetMembershipSignalE(AWMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetPrefsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListSignalE(AWTeamList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListMembershipsSignalE(AWMembershipList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipRolesSignalE(AWMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipStatusSignalE(AWMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateNameSignalE(AWTeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdatePrefsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);

    void teamsCreateSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateMembershipSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteMembershipSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetMembershipSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetPrefsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListMembershipsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipRolesSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipStatusSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateNameSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdatePrefsSignalEFull(AWHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif // AWTEAMSAPI_H
